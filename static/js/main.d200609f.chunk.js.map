{"version":3,"sources":["ModeSwitch.js","ColorPicker.js","_Context.js","util/TimeCalc.js","TimeSetter.js","SetStartTimeCell.js","SetProgressAndPauseButton.js","ChangeProjectStateCell.js","util/validation.js","ProjectsTableRow.js","AddProjectRow.js","ProjectsTableBody.js","ProjectsTable.js","EndTimeSetter.js","TimeStats.js","BreaksDrawer.js","App.js","Settings.js","About.js","LinkToRoot.js","Router.js","serviceWorker.js","index.js"],"names":["ModeSwitch","props","_this","this","buttons","label","val","map","el","react_default","a","createElement","Grid_default","key","Button_default","onClick","onModeChange","bind","variant","color","mode","className","container","alignItems","justify","children","ColorPicker","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","colorInput","React","createRef","click","e","onChange","target","value","_this2","ref","input","type","aria-label","handleChange","handleClick","width","height","cx","cy","r","fill","Component","SettingsContext","createContext","TimeCalc","time","keepPositiveIfCrossingMidnight","arguments","length","undefined","parsedTime","parseInt","isNaN","console","warn","parsedH","h","result","m","pm","isBiggerThan","minutes","setPm","times","Array","isArray","resultInMinutes","i","toMinutesSinceMidnight","toTimeObject","addToMinutes","apply","time1","time2","subtractToMinutes","showPmOrAm","convert0To12EvenIfNotShowingPmOrAm","timeFormat24H","string","precision","timeInMinutes","Math","round","orEqual","difference","temp","argument","toString","previousEndTime","previousDuration","settings","exactStartTime","add","bufferTimePercentage","roundTo","sum","average","setTimesForProjects","projects","breaks","startTime","JSON","parse","stringify","middleTimes","plannedTime","start","end","endTime","suggestStartTime","estimatedDuration","j","projectOverlapAreaStart","breakIsInFirstHalf","lengthOfBreak","isValidNumberInput","minSize","maxSize","TimeSetter","handleKeyPress","onEnterPress","id","action","previousVal","incrementation","keys","forEach","_this3","Consumer","showError","style","display","Input_default","handleInputChange","firstInputId","placeholder","autoComplete","error","hError","onKeyPress","onKeyDown","handleKeyDown","mError","Select_default","MenuItem_default","SetStartTimeCell","TableCell_default","htmlFor","TimeSetter_TimeSetter","SetProgressAndPauseButton","progress","currentTime","row","startedWorkingOnIt","setState","anchorEl","currentTarget","handleClose","handleSaveClick","onPause","open","Boolean","Fragment","IconButton_default","Pause_default","Popover_default","onClose","anchorOrigin","vertical","horizontal","transformOrigin","autoFocus","Done_default","ChangeProjectStateCell","content","push","onProjectStateChange","Undo_default","SetProgressAndPauseButton_SetProgressAndPauseButton","PlayArrow_default","projectValidation","project","name","duration","valid","errors","inputValidation","ProjectsTableRow","handleDoneEditing","validation","values","newState","showErrors","onDoneEditing","editing","handleEnterPress","objectSpread","assign","toUpperCase","showEditing","timeLeft","startIsTooLate","endIsTooLate","stateClass","RootRef_default","rootRef","provided","innerRef","TableRow_default","draggableProps","Icon_default","dragHandleProps","ColorPicker_ColorPicker","onColorChange","Tooltip_default","title","handleStartTimeChange","startTimeH","startTimeM","makeString","handleStartEditing","Edit_default","onDeleteProject","Delete_default","AddProjectRow","handleAddProject","inputValues","defaultColors","defaultColorIndex","newDefaultColorIndex","onAddProject","userHasntChangedStartTime","lastProject","suggestedStartTime","areIdentical","showErrorProp","noProjects","handleColorChange","Add_default","ProjectsTableBody","TableBody_default","droppableProps","react_beautiful_dnd_esm","draggableId","index","ProjectsTableRow_ProjectsTableRow","AddProjectRow_AddProjectRow","ProjectsTable","Table_default","TableHead_default","onDragEnd","droppableId","EndTimeSetter","TimeStats","currentTimeAvailable","updateCurrentTime","assertThisInitialized","setInterval","Date","getMinutes","getHours","onCurrentTimeChange","totalProjectTime","totalBreakTime","timeNeeded","timeRemaining","timeNeededWarning","timeRemainingNegative","timeRemainingWarning","durationLeft","subtract","timeNeededCell","right","item","BreaksDrawer","validateEndTime","breakId","success","showEndTimeErrors","clearTimeout","setTimeout","defineProperty","addBreak","new","newBreak","highestId","newId","onSave","breakDurations","handleSave","handleEnterPressNew","propertyId","findIndex","inputId","canClose","every","x","splice","rows","breakInfo","handleTimeInputChange","deleteBreak","Typography_default","colSpan","margin","App","setShowResetButton","condition1","condition2","lastResetInMs","localStorage","lastReset","getTime","lastResetInMinutes","showResetButtonAfter","setTime","showResetButton","autodetected","closeBreaksDrawer","canCloseBreaksDrawer","window","confirm","openBreaksDrawer","removeItem","endTimeErrorTimeout","newProject","currentLastProject","detectBreaksAutomatically","updateTimesAfterDelete","changeModeOnTab","preventDefault","handleModeChange","dragging","destination","log","movedProjectIndex","movedProject","firstStartTime","updateTimesAfterDrag","durationChanged","startTimeChanged","updateTimesAfterEdit","productivityPercentage","totalTimeWorkedString","allProjectsDone","totalTimeWorked","totalTimePassed","handleRootKeyDown","tabIndex","TimeStats_TimeStats","handleCurrentTimeChange","Provider","handleDoneEditingProject","handleProjectStateChange","handleDeleteProject","handleDragEnd","handleEndTimeChange","marginBottom","Drawer_default","anchor","BreaksDrawer_BreaksDrawer","saveBreaks","marginTop","resetState","Link","to","Settings_default","Help_default","sectionInfo","general","order","icon","detection","misc","inputInfo","section","max","tooltip","Settings","inputs","checked","percentage","split","onSettingsChange","history","defaultSettings","inputKeysSorted","sort","b","sectionA","sectionB","sectionAOrder","sectionBOrder","tableRow","handleDefaultColorChange","disableRipple","handleRemoveDefaultColor","handleAddDefaultColor","Switch_default","paddingTop","handleResetToDefault","About","href","rel","LinkToRoot","ArrowBack_default","theme","createMuiTheme","palette","primary","main","secondary","green","typography","useNextVariants","AppRouter","AppWithProps","App_App","SettingsWithProps","Settings_Settings","handleSettingsChange","BrowserRouter","styles","position","minWidth","Switch","Route","path","exact","component","render","lib","isLocalhost","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","Router_AppRouter","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.d200609f.chunk.js","sourcesContent":["import React from 'react';\r\nimport Button from '@material-ui/core/Button'\r\nimport Grid from '@material-ui/core/Grid'\r\n\r\nexport default function ModeSwitch(props) {\r\n  let buttonsArray = [{label: \"Plan\", val: \"planning\"}, {label: \"Work\", val: \"working\"}]\r\n  let buttons = buttonsArray.map(el => {\r\n    return (\r\n      <Grid key={el.val}>\r\n        <Button\r\n          onClick={props.onModeChange.bind(this, el.val)}\r\n          variant=\"fab\"\r\n          color={el.val === props.mode ? 'primary' : null}>\r\n          {el.label}\r\n        </Button>\r\n      </Grid>\r\n    )\r\n  })\r\n\r\n  return (\r\n    <Grid\r\n      className=\"ModeSwitch\"\r\n      container\r\n      alignItems='baseline'\r\n      justify=\"space-between\">\r\n      {buttons[0]}\r\n      {props.children}\r\n      {buttons[1]}\r\n    </Grid>\r\n  );\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nexport default class ColorPicker extends Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n\r\n    }\r\n\r\n    this.colorInput = React.createRef()\r\n  }\r\n\r\n  handleClick(){\r\n    this.colorInput.click()\r\n  }\r\n\r\n  handleChange(e){\r\n    this.props.onChange(e.target.value)\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <span className=\"ColorPicker\">\r\n        <input\r\n          className=\"colorInput\"\r\n          ref={input => this.colorInput = input}\r\n          type=\"color\"\r\n          aria-label=\"Color\"\r\n          value={this.props.value}\r\n          onChange={this.handleChange.bind(this)}/>\r\n        <svg onClick={this.handleClick.bind(this)} width=\"20\" height=\"20\">\r\n          <circle cx=\"10\" cy=\"10\" r=\".5rem\" fill={this.props.value} />\r\n        </svg>\r\n      </span>\r\n    )\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nexport const SettingsContext = React.createContext({})\r\n","export default class TimeCalc {\r\n  static toMinutesSinceMidnight(time, keepPositiveIfCrossingMidnight = false){\r\n\r\n    // if the argument is a number, simply return it\r\n    if(typeof time === \"number\") return time\r\n    // if it's a string, try to parse it\r\n    if(typeof time === \"string\"){\r\n      let parsedTime = parseInt(time)\r\n      if(!isNaN(parsedTime)) return parsedTime\r\n      else{\r\n        console.warn(\"Unexpected input: \", time)\r\n        return\r\n      }\r\n    }\r\n\r\n    // else assume it's an object (if not, throw a warning)\r\n    if(typeof time !== \"object\"){\r\n      console.warn(\"Unexpected input: \", time)\r\n      return\r\n    }\r\n\r\n    // handle time.h === 12\r\n    let parsedH = parseInt(time.h)\r\n    if(parsedH === 12) parsedH -= 12\r\n\r\n    let result = parsedH * 60 + parseInt(time.m)\r\n    if(time.pm) result += 12 * 60\r\n\r\n    if(keepPositiveIfCrossingMidnight &&\r\n      this.isBiggerThan(time, 0, true) &&\r\n      this.isBiggerThan(5*60, time, true)\r\n    ) result += 24*60\r\n\r\n    return result\r\n  }\r\n\r\n  static toTimeObject(minutes, setPm = true){\r\n    let pm = false\r\n    if(setPm){\r\n\r\n      // check for am/pm\r\n      while(minutes >= 24 * 60){\r\n        minutes -= 24*60\r\n      }\r\n      if(minutes >= 12 * 60){\r\n        pm = true\r\n        minutes -= 12*60\r\n      }\r\n    }\r\n\r\n    // split hours and minutes\r\n    let m = minutes % 60\r\n    let h = (minutes - m) / 60\r\n\r\n    if(isNaN(h) || isNaN(m)) console.warn(\"NaN result: \", {h, m, pm});\r\n\r\n    if(setPm) return {h, m, pm}\r\n    else return {h, m}\r\n  }\r\n\r\n  // add and return resultInMinutes\r\n  // used internally\r\n  static addToMinutes(){\r\n    // make both an array input and a spread input acceptable\r\n    let times = Array.isArray(arguments[0]) ? arguments[0] : arguments\r\n\r\n    // convert to minutes\r\n    let resultInMinutes = 0\r\n    for(let i = 0; i < times.length; i++){\r\n      resultInMinutes += this.toMinutesSinceMidnight(times[i])\r\n    }\r\n\r\n    return resultInMinutes\r\n  }\r\n\r\n  static add(){\r\n    return this.toTimeObject(this.addToMinutes(...arguments))\r\n  }\r\n\r\n  // subtract and return resultInMinutes\r\n  // used internally in subtract and isBiggerThan\r\n  static subtractToMinutes(time1, time2, keepPositiveIfCrossingMidnight = false){\r\n    let mins1 = this.toMinutesSinceMidnight(time1, keepPositiveIfCrossingMidnight)\r\n    let mins2 = this.toMinutesSinceMidnight(time2, keepPositiveIfCrossingMidnight)\r\n    let resultInMinutes = mins1 - mins2\r\n\r\n    return resultInMinutes\r\n  }\r\n\r\n  static subtract(time1, time2, keepPositiveIfCrossingMidnight = false){\r\n    let resultInMinutes = this.subtractToMinutes(time1, time2, keepPositiveIfCrossingMidnight)\r\n\r\n    return this.toTimeObject(resultInMinutes, false)\r\n  }\r\n\r\n  static makeString(time, showPmOrAm = true, convert0To12EvenIfNotShowingPmOrAm = false, timeFormat24H = false){\r\n    // handle a number input\r\n    if(typeof time === \"number\") time = this.toTimeObject(time, showPmOrAm)\r\n\r\n    let h, m\r\n\r\n    if(timeFormat24H)showPmOrAm = false\r\n\r\n    if(typeof time.m === \"string\") time.m = parseInt(time.m) // handle string input\r\n    m = time.m >= 10 ? time.m : \"0\" + time.m\r\n\r\n    h = ((showPmOrAm || convert0To12EvenIfNotShowingPmOrAm) && time.h === 0) ? 12 : time.h\r\n\r\n    if(timeFormat24H && time.pm) h = parseInt(h) + 12\r\n\r\n    // handle NaN\r\n    if(isNaN(m)){\r\n      console.warn(\"Wrong input to makeString: \", time);\r\n      return\r\n    }\r\n\r\n    let string = h + \":\" + m\r\n    if(typeof time.pm !== \"undefined\" && showPmOrAm){\r\n      let pmOrAm = time.pm ? \"PM\" : \"AM\"\r\n      string += \" \" + pmOrAm\r\n    }\r\n    return string\r\n  }\r\n\r\n  static round(time, precision){\r\n    let timeInMinutes = this.toMinutesSinceMidnight(time)\r\n\r\n    // round the minutes\r\n    timeInMinutes = Math.round(timeInMinutes / precision) * precision\r\n\r\n    return this.toTimeObject(timeInMinutes)\r\n  }\r\n\r\n  static isBiggerThan(time1, time2, orEqual = true, keepPositiveIfCrossingMidnight = false){\r\n    let difference = this.subtractToMinutes(time1, time2, keepPositiveIfCrossingMidnight)\r\n    if(orEqual) return difference >= 0\r\n    else return difference > 0\r\n  }\r\n\r\n  static areIdentical(){\r\n    let temp\r\n\r\n    for(let i = 0; i < arguments.length; i++){\r\n      let argument = arguments[i]\r\n\r\n      // handle NaN\r\n      if(isNaN(argument.h)) argument.h = argument.h.toString()\r\n      if(isNaN(argument.m)) argument.m = argument.m.toString()\r\n\r\n      // handle string input\r\n      if(typeof argument.h === \"string\") argument.h = parseInt(argument.h)\r\n      if(typeof argument.m === \"string\") argument.m = parseInt(argument.m)\r\n\r\n      // if temp is empty -> this is the first argument, store the first temp\r\n      if(!temp){\r\n        temp = argument\r\n        continue\r\n      }\r\n\r\n      // if the temp and the current argument are not identical, return false\r\n      if(argument.h !== temp.h || argument.m !== temp.m || argument.pm !== temp.pm) return false\r\n\r\n      // store the current argument as the new temp\r\n      temp = argument\r\n    }\r\n\r\n    return true\r\n  }\r\n\r\n  static suggestStartTime(previousEndTime, previousDuration, settings){\r\n    let exactStartTime = this.add(previousEndTime, previousDuration * settings.bufferTimePercentage)\r\n\r\n    // round the startTime to the nearest 5 and return\r\n    return this.round(exactStartTime, settings.roundTo)\r\n  }\r\n\r\n  static average(){\r\n    let sum = this.addToMinutes(...arguments)\r\n\r\n    let average = Math.round(sum / arguments.length)\r\n\r\n    return this.toTimeObject(average)\r\n  }\r\n}\r\n\r\n\r\n// takes ordered projects and sets appropriate times for each of them\r\nexport function setTimesForProjects(projects, settings, breaks, startTime){\r\n\r\n  // PSEUDO CODE: //\r\n  // determine if a project and a break overlay\r\n    // project.startTime < break.startTime && project.endTime > break.startTime\r\n  // prioritize perserving break length or start and end times?\r\n  // project 9:30-11:00, break 10:30-11:00 -> move break to 11:00-11:30\r\n  // project 9:30-10:30, break 9:50-10:00 -> move break to 9:30-9:40, move project to 9:40-10:40\r\n  // first determine if the break is in the first or second half of the project\r\n    // compare the middle of the break to the middle of the project\r\n  // if in the first, move the break to before the project, set project startTime = break[i].endTime\r\n  // if the second, move the break to after the project, set startTime of the next project to break[i].endTime\r\n\r\n  // break the reference to this.state.breaks\r\n  breaks = JSON.parse(JSON.stringify(breaks))\r\n\r\n  // calculate middleTimes beforehand to avoid multiple executions of the same code (-> improves performance)\r\n  let middleTimes = {projects: [], breaks: []}\r\n  for(let i = 0; i < projects.length; i++) middleTimes.projects[i] = TimeCalc.average(projects[i].plannedTime.start, projects[i].plannedTime.end)\r\n  for(let i = 0; i < breaks.length; i++) middleTimes.breaks[i] = TimeCalc.average(breaks[i].startTime, breaks[i].endTime)\r\n\r\n  for(let i = 0; i < projects.length; i++){\r\n\r\n    // unless this is the first project, adjust the startTime\r\n    if(i !== 0){\r\n      projects[i].plannedTime.start = TimeCalc.suggestStartTime(\r\n        projects[i - 1].plannedTime.end,\r\n        projects[i - 1].estimatedDuration,\r\n        settings\r\n      )\r\n    }\r\n\r\n    // if it is the first project then startTime must equal the one from the state\r\n    else projects[i].plannedTime.start = startTime\r\n\r\n    // set the appropriate endTime\r\n    projects[i].plannedTime.end = TimeCalc.add(projects[i].plannedTime.start, projects[i].estimatedDuration)\r\n\r\n    // loop through the breaks, adjust if one of them overlays with the project\r\n    for(let j = 0; j < breaks.length; j++){\r\n      // if breaks[j] and projects[i] overlay...\r\n      // (we only care about breaks[j].startTime, the endTime is irrelevant here)\r\n      // (projectOverlapAreaStart is a way to handle the scenario of the break starting in the buffer, it also handles i === 0)\r\n      let projectOverlapAreaStart = i === 0 ? projects[i].plannedTime.start : projects[i - 1].plannedTime.end\r\n      if(\r\n        TimeCalc.isBiggerThan(projects[i].plannedTime.end, breaks[j].startTime, true, true) &&\r\n        TimeCalc.isBiggerThan(breaks[j].startTime, projectOverlapAreaStart, true, true)\r\n      ){\r\n        // determine if the break is in the first or second half of the project\r\n        let breakIsInFirstHalf = TimeCalc.isBiggerThan(middleTimes.projects[i], middleTimes.breaks[j], true, true)\r\n\r\n        // get the length of the break\r\n        let lengthOfBreak = TimeCalc.subtractToMinutes(breaks[j].endTime, breaks[j].startTime, true)\r\n\r\n        // if the break is in the first half of the project...\r\n        if(breakIsInFirstHalf){\r\n          // move the break before the project\r\n          // (if it's the first project, there is no, projects[i - 1] -> handles undefined with ternary statement)\r\n          breaks[j].startTime = (i === 0 ? projects[i].plannedTime.start : projects[i - 1].plannedTime.end)\r\n\r\n          // adjust the endTime of the break\r\n          breaks[j].endTime = TimeCalc.add(breaks[j].startTime, lengthOfBreak)\r\n\r\n          // move the project after the break\r\n          if(i === 0) projects[i].plannedTime.start = breaks[j].endTime // if it's the first project, move the startTime after the break\r\n          // else add the buffer\r\n          else projects[i].plannedTime.start = TimeCalc.suggestStartTime(breaks[j].endTime, projects[i-1].estimatedDuration, settings)\r\n          projects[i].plannedTime.end = TimeCalc.add(projects[i].plannedTime.start, projects[i].estimatedDuration)\r\n        }\r\n\r\n        // if the break is in the second half of the project...\r\n        else{\r\n          // move the break after the project\r\n          breaks[j].startTime = projects[i].plannedTime.end\r\n          breaks[j].endTime = TimeCalc.add(breaks[j].startTime, lengthOfBreak)\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return projects\r\n}\r\n","import React, { Component } from 'react';\r\nimport Input from '@material-ui/core/Input';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { SettingsContext } from './_Context'\r\nimport TimeCalc from './util/TimeCalc'\r\n\r\nfunction isValidNumberInput(val, minSize, maxSize){\r\n  if(\r\n    val === \"\" || (\r\n      !isNaN(val) && // if it's a number or an emty string and...\r\n      val >= minSize && val <= maxSize // the correct size\r\n    )\r\n  ) return true\r\n  else return false\r\n}\r\n\r\n\r\nexport default class TimeSetter extends Component {\r\n  handleInputChange(id, timeFormat24H = false, e){\r\n    // get the input value\r\n    let val\r\n    if(typeof e === \"number\") val = e // needs to accept the input from handleKeyDown\r\n    else{\r\n      if(id === \"pm\") val = e.target.value === \"PM\"\r\n      else val = e.target.value\r\n    }\r\n\r\n    // validate the input\r\n    let maxHValue = timeFormat24H ? 24 : 12\r\n    if((id === \"h\" && !isValidNumberInput(val, 1, maxHValue))\r\n      || (id === \"m\" && !isValidNumberInput(val, 0, 59))\r\n    ) return\r\n\r\n\r\n    // if we're using the 24-hour time format for the UI, convert it back over to the normal format\r\n    if(timeFormat24H && id === \"h\"){\r\n      if(val >= 12){\r\n        val -= 12\r\n        this.props.onChange(\"pm\", true)\r\n      }\r\n      else this.props.onChange(\"pm\", false)\r\n    }\r\n\r\n\r\n    // emit the change up the chain\r\n    this.props.onChange(id, val)\r\n  }\r\n\r\n  handleKeyPress = e => {\r\n    if(e.key === \"Enter\" && this.props.onEnterPress) this.props.onEnterPress()\r\n  }\r\n\r\n  handleKeyDown(id, settings, e){\r\n    // determine what is to be done\r\n    let action\r\n    if(e.key === \"ArrowUp\") action = \"up\"\r\n    if(e.key === \"ArrowDown\") action = \"down\"\r\n\r\n    // if nothing is supposed to be done, stop the execution\r\n    if(!action) return\r\n\r\n    // get the value, handle empty input\r\n    let val, previousVal\r\n    val = previousVal = this.props.value\r\n    if(!val || isNaN(val.m)) val = 0\r\n\r\n    // edit the val\r\n    let incrementation = id === \"m\" ? settings.roundTo : 60\r\n    if(action === \"up\") val = TimeCalc.add(val, incrementation)\r\n    else val = TimeCalc.toTimeObject(TimeCalc.subtractToMinutes(val, incrementation), true)\r\n\r\n    // handle negative values\r\n    if(TimeCalc.isBiggerThan(0, val, false)) val = TimeCalc.add(val, 24*60)\r\n\r\n    // loop through the object keys, emit any changes up the chain\r\n    Object.keys(val).forEach(key => {\r\n      if(previousVal[key] !== val[key]) this.props.onChange(key, val[key])\r\n    })\r\n  }\r\n\r\n  render(){\r\n    let h = this.props.value.h\r\n    h = h === 0 ? 12 : h\r\n    let m = this.props.value.m\r\n    m = m === 0 ? \"0\" + m : m\r\n\r\n    return (\r\n      <SettingsContext.Consumer>\r\n        {settings => {\r\n          return (\r\n            <div className={\"TimeSetter\" + (this.props.showError ? \" timeSetterError\" : \"\")} style={{display: \"inline\"}}>\r\n              <Input\r\n                onChange={this.handleInputChange.bind(this, \"h\", settings.timeFormat24H)}\r\n                value={(settings.timeFormat24H && this.props.value.pm) ? h + 12 : h}\r\n                id={this.props.firstInputId}\r\n                placeholder=\"Hours\"\r\n                aria-label=\"Hours\"\r\n                autoComplete=\"off\"\r\n                error={this.props.hError}\r\n                onKeyPress={this.handleKeyPress}\r\n                onKeyDown={this.handleKeyDown.bind(this, \"h\", settings)}\r\n              />\r\n              :\r\n              <Input\r\n                onChange={this.handleInputChange.bind(this, \"m\", settings.timeFormat24H)}\r\n                value={m}\r\n                placeholder=\"Minutes\"\r\n                aria-label=\"Minutes\"\r\n                autoComplete=\"off\"\r\n                error={this.props.mError}\r\n                onKeyPress={this.handleKeyPress}\r\n                onKeyDown={this.handleKeyDown.bind(this, \"m\", settings)}\r\n              />\r\n              {!settings.timeFormat24H && (\r\n                <Select\r\n                  onChange={this.handleInputChange.bind(this, \"pm\", settings.timeFormat24H)}\r\n                  value={this.props.value.pm ? \"PM\" : \"AM\"}>\r\n                  <MenuItem value=\"AM\">AM</MenuItem>\r\n                  <MenuItem value=\"PM\">PM</MenuItem>\r\n                </Select>\r\n              )}\r\n            </div>\r\n          )\r\n        }}\r\n      </SettingsContext.Consumer>\r\n    )\r\n  }\r\n}\r\n","import React from 'react';\r\nimport TimeSetter from './TimeSetter'\r\nimport TableCell from '@material-ui/core/TableCell';\r\n\r\nexport default function SetStartTimeCell(props){\r\n  return (\r\n    <TableCell className=\"setStartTimeCell\">\r\n      <div className=\"setStartTimeLabelDiv\">\r\n        <label htmlFor={props.firstInputId}>\r\n          Start:\r\n        </label>\r\n      </div>\r\n      <TimeSetter\r\n        onChange={props.onChange}\r\n        value={props.value}\r\n        firstInputId={props.firstInputId}\r\n        hError={props.hError}\r\n        mError={props.mError}\r\n        onEnterPress={props.onEnterPress}\r\n      />\r\n    </TableCell>\r\n  )\r\n}\r\n","import React, { Component } from 'react';\r\nimport Popover from '@material-ui/core/Popover';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Input from '@material-ui/core/Input';\r\nimport PauseIcon from '@material-ui/icons/Pause';\r\nimport DoneIcon from '@material-ui/icons/Done';\r\nimport TimeCalc from './util/TimeCalc'\r\n\r\nexport default class SetProgressAndPauseButton extends Component{\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      anchorEl: null,\r\n      progress: \"\"\r\n    }\r\n  }\r\n\r\n  handleClick = e => {\r\n    let progress = TimeCalc.subtractToMinutes(this.props.currentTime, this.props.row.startedWorkingOnIt, true)\r\n    if(this.props.row.progress) progress = progress + parseInt(this.props.row.progress)\r\n\r\n    this.setState({\r\n      anchorEl: e.currentTarget,\r\n      progress: progress\r\n    })\r\n  }\r\n\r\n  handleClose = () => {\r\n    this.setState({anchorEl: null})\r\n  }\r\n\r\n  handleInputChange = e => {\r\n    let val = e.target.value\r\n\r\n    if(isNaN(val)) return\r\n\r\n    this.setState({progress: val})\r\n  }\r\n\r\n  handleSaveClick = () => {\r\n    this.props.onPause(this.props.row.id, \"paused\", this.state.progress)\r\n  }\r\n\r\n  render(){\r\n    let anchorEl = this.state.anchorEl\r\n    let open = Boolean(anchorEl)\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <IconButton  aria-label=\"Pause the project\" onClick={this.handleClick}>\r\n          <PauseIcon />\r\n        </IconButton>\r\n\r\n        <Popover\r\n          open={open}\r\n          anchorEl={anchorEl}\r\n          onClose={this.handleClose}\r\n          anchorOrigin={{\r\n            vertical: 'bottom',\r\n            horizontal: 'center',\r\n          }}\r\n          transformOrigin={{\r\n            vertical: 'top',\r\n            horizontal: 'center',\r\n          }}>\r\n          <div className=\"setProgressPopover\">\r\n            <span>I've worked on this for </span>\r\n            <Input\r\n              autoFocus\r\n              aria-label=\"Progress in minutes\"\r\n              value={this.state.progress}\r\n              onChange={this.handleInputChange}\r\n              onKeyPress={e => {if(e.key === \"Enter\") this.handleSaveClick()}}\r\n            />\r\n            <span> minutes</span>\r\n            <IconButton\r\n              aria-label=\"Save the progress and pause the project\"\r\n              onClick={this.handleSaveClick}\r\n              color=\"primary\">\r\n              <DoneIcon />\r\n            </IconButton>\r\n          </div>\r\n        </Popover>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n","import React from 'react';\r\nimport SetProgressAndPauseButton from './SetProgressAndPauseButton'\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport DoneIcon from '@material-ui/icons/Done';\r\nimport StartIcon from '@material-ui/icons/PlayArrow';\r\nimport UndoIcon from '@material-ui/icons/Undo';\r\n\r\nexport default function ChangeProjectStateCell(props){\r\n  let content = []\r\n  if(props.row.state === \"done\"){\r\n    content.push(\r\n      <div key=\"doneDiv\" className=\"changeProjectStateCellDoneDiv\">\r\n        DONE\r\n        <IconButton\r\n          aria-label=\"Mark project as undone\"\r\n          onClick={props.onProjectStateChange.bind(this, props.row.id, \"paused\")}\r\n        >\r\n          <UndoIcon/>\r\n        </IconButton>\r\n      </div>\r\n    )\r\n  }\r\n  else{\r\n    if(props.row.state === \"workingOnIt\"){\r\n      content.push(\r\n        <SetProgressAndPauseButton\r\n          key=\"pause\"\r\n          row={props.row}\r\n          currentTime={props.currentTime}\r\n          onPause={props.onProjectStateChange} />\r\n      )\r\n    }\r\n    else{\r\n      content.push(\r\n        <IconButton\r\n          key=\"start\"\r\n          aria-label=\"Start working on the project\"\r\n          onClick={props.onProjectStateChange.bind(this, props.row.id, \"workingOnIt\")}\r\n          color=\"primary\"\r\n          >\r\n          <StartIcon />\r\n        </IconButton>\r\n      )\r\n    }\r\n\r\n    content.push(\r\n      <IconButton\r\n        key=\"done\"\r\n        aria-label=\"Mark the project as done\"\r\n        onClick={props.onProjectStateChange.bind(this, props.row.id, \"done\")}\r\n        color={props.row.state === \"workingOnIt\" ? \"primary\" : undefined}>\r\n        <DoneIcon />\r\n      </IconButton>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <TableCell>\r\n      {content.map(el => el)}\r\n    </TableCell>\r\n  )\r\n}\r\n","export function projectValidation(project){\r\n  let error = []\r\n  if(project.name === \"\") error.push(\"name\")\r\n  if(project.duration === \"\" || isNaN(project.duration) || project.duration > 1440) error.push(\"duration\")\r\n  if(project.startTime.h === \"\" || isNaN(project.startTime.h)) error.push(\"startTimeH\")\r\n  if(project.startTime.m === \"\" || isNaN(project.startTime.m)) error.push(\"startTimeM\")\r\n\r\n  if(error.length) return {valid: false, errors: error}\r\n  else return {valid: true}\r\n}\r\n\r\nexport function inputValidation(id, val){\r\n  if(id === \"duration\" && isNaN(val) && val !== \"\") return false\r\n  else return true\r\n}\r\n","import React, { Component } from 'react';\r\nimport ColorPicker from './ColorPicker'\r\nimport SetStartTimeCell from './SetStartTimeCell'\r\nimport ChangeProjectStateCell from './ChangeProjectStateCell'\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport RootRef from '@material-ui/core/RootRef';\r\nimport Icon from '@material-ui/core/Icon';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Input from '@material-ui/core/Input';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport TimeCalc from './util/TimeCalc'\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DoneIcon from '@material-ui/icons/Done';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport { projectValidation, inputValidation } from './util/validation'\r\nimport { SettingsContext } from './_Context'\r\n\r\nexport default class ProjectsTableRow extends Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      editing: false,\r\n      values: {\r\n        name: this.props.row.name,\r\n        duration: this.props.row.estimatedDuration,\r\n        startTime: this.props.row.plannedTime.start\r\n      },\r\n      showErrors: {}\r\n    }\r\n  }\r\n\r\n  handleStartEditing(){\r\n    this.setState({\r\n      editing: true,\r\n      // get the startTime from props again in case it changed via drag n drop\r\n      values: {\r\n        ...this.state.values,\r\n        startTime: Object.assign({}, this.props.row.plannedTime.start)\r\n      }\r\n    })\r\n  }\r\n\r\n  handleInputChange(id, e){\r\n    let val = e.target.value\r\n    // validation\r\n    if(!inputValidation(id, val)) return\r\n\r\n    let newState = {values: this.state.values, showErrors: this.state.showErrors}\r\n    newState.values[id] = val\r\n    newState.showErrors[id] = false\r\n    this.setState(newState)\r\n  }\r\n\r\n  handleStartTimeChange(id, val){\r\n    let newState = {values: this.state.values, showErrors: this.state.showErrors}\r\n    newState.values.startTime[id] = val\r\n    newState.showErrors[\"startTime\" + id.toUpperCase()] = false\r\n    this.setState(newState)\r\n  }\r\n\r\n  handleDoneEditing = () => {\r\n    // validation\r\n    let validation = projectValidation(this.state.values)\r\n    if(!validation.valid){\r\n      let newState = this.state.showErrors\r\n      validation.errors.forEach(error => {\r\n        newState[error] = true\r\n      })\r\n      this.setState(newState)\r\n      return\r\n    }\r\n\r\n    this.props.onDoneEditing(this.props.row.id, this.state.values)\r\n    this.setState({editing: false})\r\n  }\r\n\r\n  handleEnterPress = e => {if(e.key === \"Enter\") this.handleDoneEditing()}\r\n\r\n  render(){\r\n    let showEditing = this.state.editing && this.props.mode === \"planning\"\r\n\r\n    // calculate progress\r\n    let progress\r\n    if(this.props.row.progress) progress = parseInt(this.props.row.progress)\r\n    else progress = 0\r\n    if(this.props.row.state === \"workingOnIt\"){\r\n      progress += TimeCalc.subtractToMinutes(this.props.currentTime, this.props.row.startedWorkingOnIt, true)\r\n    }\r\n    if(progress > this.props.row.estimatedDuration) progress = this.props.row.estimatedDuration\r\n\r\n    let timeLeft = parseInt(this.props.row.estimatedDuration) - progress\r\n\r\n    // get the stateClass - done, too late\r\n    let startIsTooLate = !TimeCalc.isBiggerThan(\r\n      TimeCalc.add(this.props.row.plannedTime.start, progress),\r\n      this.props.currentTime, true, true)\r\n    let endIsTooLate = !TimeCalc.isBiggerThan(this.props.row.plannedTime.end, this.props.currentTime, true, true)\r\n    let stateClass = null\r\n    if(this.props.row.state === \"done\") stateClass = \"stateClassDone\"\r\n    else if(startIsTooLate && this.props.row.state !== \"workingOnIt\") stateClass = \"stateClassTooLate\"\r\n\r\n    return (\r\n      <RootRef rootRef={this.props.provided.innerRef}>\r\n        <TableRow\r\n          {...this.props.provided.draggableProps}>\r\n\r\n          <TableCell>\r\n            <Icon className=\"dragIcon\" {...this.props.provided.dragHandleProps}>drag_indicator</Icon>\r\n            <ColorPicker value={this.props.row.color} onChange={this.props.onColorChange.bind(this, this.props.row.id)}/>\r\n          </TableCell>\r\n\r\n          <TableCell className={showEditing ? \"setNameCell\" : stateClass}>\r\n            {showEditing ? (\r\n              <Input\r\n                value={this.state.values.name}\r\n                onChange={this.handleInputChange.bind(this, \"name\")}\r\n                placeholder=\"Name\"\r\n                aria-label=\"Name\"\r\n                error={this.state.showErrors.name}\r\n                onKeyPress={this.handleEnterPress}\r\n              />\r\n            ) : this.props.row.name}\r\n          </TableCell>\r\n\r\n          <TableCell className={showEditing ? \"setDurationCell\" : null}>\r\n            {showEditing ? (\r\n              <Input\r\n                value={this.state.values.duration}\r\n                onChange={this.handleInputChange.bind(this, \"duration\")}\r\n                placeholder=\"Duration\"\r\n                aria-label=\"Duration\"\r\n                error={this.state.showErrors.duration}\r\n                onKeyPress={this.handleEnterPress}\r\n              />\r\n            ) : (\r\n              progress && this.props.row.state !== \"done\" ? (\r\n                <Tooltip title={progress + \"/\" + this.props.row.estimatedDuration + \" done\"}>\r\n                  <span>\r\n                    {timeLeft} minutes left\r\n                  </span>\r\n                </Tooltip>\r\n              ) : (\r\n                this.props.row.estimatedDuration + \" minutes\"\r\n              )\r\n            )}\r\n          </TableCell>\r\n\r\n          {showEditing ? (\r\n            <SetStartTimeCell\r\n              value={this.state.values.startTime}\r\n              onChange={this.handleStartTimeChange.bind(this)}\r\n              firstInputId={\"changeStartTimeInput\" + this.props.row.id}\r\n              hError={this.state.showErrors.startTimeH}\r\n              mError={this.state.showErrors.startTimeM}\r\n              onEnterPress={this.handleDoneEditing}\r\n            />\r\n          ) : (\r\n            <SettingsContext.Consumer>\r\n              {settings => {\r\n                return (\r\n                  <TableCell className={showEditing ? \"setStartTimeCell\" : null}>\r\n                    <span className={startIsTooLate && stateClass === \"stateClassTooLate\"  ? stateClass : null}>\r\n                      {TimeCalc.makeString(this.props.row.plannedTime.start,\r\n                        this.props.row.plannedTime.start.pm !== this.props.row.plannedTime.end.pm,\r\n                        true,\r\n                        settings.timeFormat24H\r\n                      ) /*showPmOrAm only if it's different from the endTime*/}\r\n                    </span>\r\n                    <span className={startIsTooLate && endIsTooLate && stateClass === \"stateClassTooLate\" ? stateClass : null}>\r\n                      -\r\n                    </span>\r\n                    <span className={endIsTooLate && stateClass !== \"stateClassDone\" ? \"stateClassTooLate\" : null}>\r\n                      {TimeCalc.makeString(this.props.row.plannedTime.end, true, false, settings.timeFormat24H)}\r\n                    </span>\r\n                  </TableCell>\r\n                )\r\n              }}\r\n            </SettingsContext.Consumer>\r\n          )}\r\n\r\n          {this.props.mode === \"planning\" ? (\r\n            <TableCell>\r\n              {showEditing ? (\r\n                <IconButton\r\n                  aria-label=\"Save changes\"\r\n                  onClick={this.handleDoneEditing}\r\n                  color=\"primary\">\r\n                  <DoneIcon />\r\n                </IconButton>\r\n              ) : (\r\n                <IconButton\r\n                  aria-label=\"Edit the project\"\r\n                  onClick={this.handleStartEditing.bind(this)}>\r\n                  <EditIcon />\r\n                </IconButton>\r\n              )}\r\n              <IconButton\r\n                aria-label=\"Delete the project\"\r\n                onClick={this.props.onDeleteProject.bind(this, this.props.row.id)}\r\n                className=\"deleteIconButton\">\r\n                <DeleteIcon />\r\n              </IconButton>\r\n            </TableCell>\r\n          ) : (\r\n            <ChangeProjectStateCell\r\n              row={this.props.row}\r\n              onProjectStateChange={this.props.onProjectStateChange}\r\n              currentTime={this.props.currentTime}\r\n            />\r\n          )}\r\n        </TableRow>\r\n      </RootRef>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport ColorPicker from './ColorPicker'\r\nimport SetStartTimeCell from './SetStartTimeCell'\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport Input from '@material-ui/core/Input';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport TimeCalc from './util/TimeCalc'\r\nimport { projectValidation, inputValidation } from './util/validation'\r\n\r\nexport default class AddProjectRow extends Component {\r\n  constructor(props){\r\n    super(props)\r\n\r\n    this.state = {\r\n      inputValues: {\r\n        name: \"\",\r\n        duration: \"\",\r\n        startTime: {h: \"\", m: \"\", pm: true},\r\n        color: this.props.defaultColorIndex ? this.props.settings.defaultColors[this.props.defaultColorIndex] : \"#000000\"\r\n      },\r\n      userHasntChangedStartTime: true,\r\n      defaultColorIndex: this.props.defaultColorIndex,\r\n      showErrors: {}\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(){\r\n    // if the user hasn't changed startTime yet, suggest a new startTime\r\n    // (don't execute if the props haven't loaded yet)\r\n    if(\r\n      this.state.userHasntChangedStartTime &&\r\n      this.props.settings.bufferTimePercentage &&\r\n      this.props.lastProject\r\n    ){\r\n      let suggestedStartTime = TimeCalc.suggestStartTime(\r\n        this.props.lastProject.plannedTime.end,\r\n        this.props.lastProject.estimatedDuration,\r\n        this.props.settings\r\n      )\r\n      if(\r\n        this.state.inputValues.startTime.h === \"\" ||\r\n        !TimeCalc.areIdentical(suggestedStartTime, this.state.inputValues.startTime)\r\n      ){\r\n        this.setState(\r\n          {\r\n            inputValues: {\r\n            ...this.state.inputValues,\r\n              startTime: suggestedStartTime\r\n            }\r\n          }\r\n        )\r\n      }\r\n    }\r\n\r\n    // only used if defaultColorIndex (and startTime) are being initialized with data from the localStorage\r\n    if(typeof this.state.defaultColorIndex === \"undefined\"\r\n      && typeof this.props.defaultColorIndex !== \"undefined\"\r\n      && this.props.settings.defaultColors){\r\n\r\n      let inputValues = this.state.inputValues\r\n\r\n      let defaultColors = this.props.settings.defaultColors\r\n      let defaultColorIndex = this.props.defaultColorIndex\r\n\r\n      // handle the following: defaultColorsIndex is at max and the user deletes the last defaultColor in the settings\r\n      if(defaultColors.length <= defaultColorIndex) defaultColorIndex = 0\r\n\r\n      inputValues.color = defaultColors[defaultColorIndex]\r\n\r\n      // handle undefined\r\n      inputValues.color = inputValues.color ? inputValues.color : \"#000000\"\r\n\r\n      this.setState({inputValues, defaultColorIndex})\r\n    }\r\n  }\r\n\r\n  handleInputChange(el, e){\r\n    let val = e.target.value\r\n    // validation\r\n    if(!inputValidation(el, val)) return\r\n\r\n    let newState = {inputValues: this.state.inputValues, showErrors: this.state.showErrors}\r\n    newState.inputValues[el] = val\r\n    newState.showErrors[el] = false\r\n    this.setState(newState)\r\n  }\r\n\r\n  handleColorChange(val){\r\n    let newState = this.state.inputValues\r\n    newState.color = val\r\n    this.setState({inputValues: newState})\r\n  }\r\n\r\n  handleStartTimeChange(id, val){\r\n    let newState = {inputValues: this.state.inputValues, showErrors: this.state.showErrors}\r\n    newState.inputValues.startTime[id] = val\r\n    newState.showErrors[\"startTime\" + id.toUpperCase()] = false\r\n    newState.userHasntChangedStartTime = false\r\n    this.setState(newState)\r\n  }\r\n\r\n  handleAddProject = () => {\r\n    // validation\r\n    let validation = projectValidation(this.state.inputValues)\r\n    if(!validation.valid){\r\n      let newState = this.state.showErrors\r\n      validation.errors.forEach(error => {\r\n        newState[error] = true\r\n      })\r\n      this.setState(newState)\r\n      return\r\n    }\r\n\r\n    // reset the state\r\n    let newState = {\r\n      name: \"\",\r\n      duration: \"\",\r\n      startTime: {\r\n        h: \"\",\r\n        m: \"\",\r\n        pm: true\r\n      },\r\n      color: this.state.inputValues.color // perserve the color\r\n    }\r\n\r\n    // if the user hasn't changed the color from the default, go to the next defaultColor\r\n    let defaultColors = this.props.settings.defaultColors\r\n    let defaultColorIndex = this.state.defaultColorIndex\r\n\r\n    let newDefaultColorIndex = defaultColorIndex >= defaultColors.length - 1 ? 0 : ++defaultColorIndex\r\n\r\n    newState.color = defaultColors[newDefaultColorIndex]\r\n\r\n    // call the props function\r\n    this.props.onAddProject(this.state.inputValues, newDefaultColorIndex)\r\n\r\n    // save to state\r\n    this.setState({inputValues: newState, userHasntChangedStartTime: true, defaultColorIndex: newDefaultColorIndex})\r\n  }\r\n\r\n  handleEnterPress = e => {if(e.key === \"Enter\") this.handleAddProject()}\r\n\r\n  render(){\r\n    let showErrorProp = this.props.showErrors.noProjects\r\n\r\n    return (\r\n      <TableRow id=\"addProjectRow\">\r\n        <TableCell>\r\n          <ColorPicker\r\n            value={this.state.inputValues.color}\r\n            onChange={this.handleColorChange.bind(this)} />\r\n        </TableCell>\r\n        <TableCell className=\"setNameCell\">\r\n          <Input\r\n            onChange={this.handleInputChange.bind(this, \"name\")}\r\n            value={this.state.inputValues[\"name\"]}\r\n            placeholder=\"Name\"\r\n            aria-label=\"Name\"\r\n            error={this.state.showErrors.name || showErrorProp}\r\n            onKeyPress={this.handleEnterPress}\r\n            autoFocus\r\n          />\r\n        </TableCell>\r\n        <TableCell className=\"setDurationCell\">\r\n          <Input\r\n            onChange={this.handleInputChange.bind(this, \"duration\")}\r\n            value={this.state.inputValues[\"duration\"]}\r\n            placeholder=\"Duration\"\r\n            aria-label=\"Duration\"\r\n            error={this.state.showErrors.duration || showErrorProp}\r\n            onKeyPress={this.handleEnterPress}\r\n          /> minutes\r\n        </TableCell>\r\n        <SetStartTimeCell\r\n          onChange={this.handleStartTimeChange.bind(this)}\r\n          value={this.state.inputValues.startTime}\r\n          firstInputId=\"setStartTimeInput\"\r\n          hError={this.state.showErrors.startTimeH || showErrorProp}\r\n          mError={this.state.showErrors.startTimeM || showErrorProp}\r\n          showErrors={this.state.showErrors}\r\n          onEnterPress={this.handleAddProject}\r\n        />\r\n        <TableCell>\r\n          <IconButton color=\"primary\"\r\n            style={{color: this.props.showErrors.noProjects ? \"red\" : null}}\r\n            aria-label=\"Add the new project\"\r\n            onClick={this.handleAddProject}>\r\n            <AddIcon />\r\n          </IconButton>\r\n        </TableCell>\r\n      </TableRow>\r\n    )\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { Draggable } from 'react-beautiful-dnd'\r\nimport ProjectsTableRow from './ProjectsTableRow'\r\nimport AddProjectRow from './AddProjectRow'\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport RootRef from '@material-ui/core/RootRef';\r\n\r\nexport default function ProjectsTableBody(props) {\r\n  return (\r\n    <RootRef rootRef={props.provided.innerRef}>\r\n      <TableBody {...props.provided.droppableProps}>\r\n        {props.projects.map((row, i) => {\r\n          return (\r\n            <Draggable key={row.id} draggableId={row.id.toString()} index={i}>\r\n              {provided => {\r\n                return (\r\n                  <ProjectsTableRow\r\n                    mode={props.mode}\r\n                    row={row}\r\n                    currentTime={props.currentTime}\r\n                    provided={provided}\r\n                    onColorChange={props.onColorChange}\r\n                    onDoneEditing={props.onDoneEditing}\r\n                    onProjectStateChange={props.onProjectStateChange}\r\n                    onDeleteProject={props.onDeleteProject}\r\n                  />\r\n                )\r\n              }}\r\n            </Draggable>\r\n          )\r\n        })}\r\n        {props.provided.placeholder}\r\n        {\r\n          // if in planning mode..\r\n          props.mode === \"planning\" && (\r\n            <AddProjectRow\r\n              settings={props.settings}\r\n              defaultColorIndex={props.defaultColorIndex}\r\n              showErrors={props.showErrors}\r\n              lastProject={props.projects[props.projects.length - 1]}\r\n              onAddProject={props.onAddProject}\r\n            />\r\n          )\r\n        }\r\n        </TableBody>\r\n      </RootRef>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport ProjectsTableBody from './ProjectsTableBody'\r\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd'\r\nimport Table from '@material-ui/core/Table';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\n\r\n\r\nexport default function ProjectsTable(props){\r\n  return (\r\n    <Table id=\"ProjectsTable\">\r\n      <TableHead>\r\n        <TableRow>\r\n          <TableCell/>\r\n          <TableCell>Name</TableCell>\r\n          <TableCell>Duration estimate</TableCell>\r\n          <TableCell>Planned time</TableCell>\r\n          <TableCell/>\r\n        </TableRow>\r\n      </TableHead>\r\n      <DragDropContext onDragEnd={props.onDragEnd}>\r\n        <Droppable droppableId=\"0\">\r\n          {provided => {\r\n            return (\r\n              <ProjectsTableBody\r\n                projects={props.projects}\r\n                mode={props.mode}\r\n                settings={props.settings}\r\n                currentTime={props.currentTime}\r\n                defaultColorIndex={props.defaultColorIndex}\r\n                showErrors={props.showErrors}\r\n                onColorChange={props.onColorChange}\r\n                onDoneEditing={props.onDoneEditing}\r\n                onAddProject={props.onAddProject}\r\n                provided={provided}\r\n                onProjectStateChange={props.onProjectStateChange}\r\n                onDeleteProject={props.onDeleteProject} />\r\n              )\r\n            }\r\n            }\r\n          </Droppable>\r\n        </DragDropContext>\r\n    </Table>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport TimeSetter from './TimeSetter'\r\n\r\nexport default function EndTimeSetter(props){\r\n  return (\r\n    <div id=\"setEndTime\">\r\n      <label htmlFor=\"endTimeHoursInput\">\r\n        Time when you want to stop working:\r\n      </label>\r\n      <TimeSetter\r\n        onChange={props.onChange}\r\n        value={props.value}\r\n        firstInputId=\"endTimeHoursInput\"\r\n        showError={props.showError} />\r\n    </div>\r\n  )\r\n}\r\n","import React, { Component } from 'react';\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Tooltip from '@material-ui/core/Tooltip'\r\nimport TimeCalc from './util/TimeCalc'\r\n\r\nexport default class TimeStats extends Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      currentTimeAvailable: false // stores whether the currentTime has been set (to prevent unnecessary and useless calculation on load)\r\n    }\r\n\r\n    this.updateCurrentTime = this.updateCurrentTime.bind(this)\r\n\r\n    setInterval(this.updateCurrentTime, 1000)\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.updateCurrentTime()\r\n  }\r\n\r\n  updateCurrentTime(){\r\n    let currentTime = new Date()\r\n    let m = currentTime.getMinutes()\r\n\r\n    // if it's still the same minute, there's no need to update the clock\r\n    // (and if this isn't the initial time setting)\r\n    if(m === this.props.currentTime.m && this.props.currentTime.h !== 0) return\r\n\r\n    // format the time\r\n    let h = currentTime.getHours()\r\n    let pm = h >= 12\r\n    h = h % 12\r\n    h = h === 0 ? 12 : h\r\n\r\n    this.setState({currentTimeAvailable: true})\r\n\r\n    // update the state\r\n    this.props.onCurrentTimeChange({h, m, pm})\r\n  }\r\n\r\n  render(){\r\n    // calculate the stats\r\n    // (if currentTime and settings are available)\r\n    let totalProjectTime, totalBreakTime, timeNeeded, timeRemaining, timeNeededWarning, timeRemainingNegative, timeRemainingWarning\r\n\r\n    if(this.state.currentTimeAvailable && this.props.settings.bufferTimePercentage){\r\n      totalProjectTime = 0\r\n      this.props.projects.forEach((project, i) => {\r\n        if(project.state !== \"done\"){\r\n          let durationLeft = parseInt(project.estimatedDuration)\r\n          if(project.progress){\r\n            if(project.progress > project.estimatedDuration) durationLeft = 0\r\n            else durationLeft-= parseInt(project.progress)\r\n          }\r\n          if(project.state === \"workingOnIt\" && project.startedWorkingOnIt){\r\n            durationLeft -= TimeCalc.subtractToMinutes(this.props.currentTime, project.startedWorkingOnIt, true)\r\n          }\r\n\r\n          // if this isn't the last project, add a buffer time to the sum\r\n          if(i !== this.props.projects.length - 1){\r\n            durationLeft += Math.round(durationLeft * this.props.settings.bufferTimePercentage)\r\n          }\r\n\r\n          totalProjectTime += durationLeft\r\n        }\r\n      })\r\n      // round totalProjectTime according to settings\r\n      totalProjectTime = Math.round(totalProjectTime / this.props.settings.roundTo) * this.props.settings.roundTo\r\n\r\n      totalBreakTime = 0\r\n      this.props.breaks.forEach(el => {\r\n        let endTime = TimeCalc.toMinutesSinceMidnight(el.endTime, true)\r\n        let currentTime = TimeCalc.toMinutesSinceMidnight(this.props.currentTime, true)\r\n\r\n        // if the break has already passed, don't count it in\r\n        if(TimeCalc.isBiggerThan(currentTime, endTime, false)) return\r\n\r\n        let startTime = TimeCalc.toMinutesSinceMidnight(el.startTime, true)\r\n\r\n        // if the break hasn't started yet\r\n        if(TimeCalc.isBiggerThan(startTime, currentTime, true)){\r\n          totalBreakTime += TimeCalc.subtractToMinutes(endTime, startTime, true)\r\n        }\r\n        // if the break has started and is currently going on\r\n        else totalBreakTime += TimeCalc.subtractToMinutes(endTime, currentTime, true)\r\n      })\r\n      // round totalBreakTime according to settings\r\n      totalBreakTime = Math.round(totalBreakTime / this.props.settings.roundTo) * this.props.settings.roundTo\r\n\r\n      timeNeeded = TimeCalc.toTimeObject(TimeCalc.addToMinutes(totalProjectTime, totalBreakTime), false)\r\n      timeRemaining = TimeCalc.subtract(this.props.endTime, this.props.currentTime, true)\r\n\r\n      // figure out which warnings to show\r\n      timeNeededWarning = TimeCalc.isBiggerThan(timeNeeded, timeRemaining)\r\n      timeRemainingNegative = !TimeCalc.isBiggerThan(timeRemaining, 0)\r\n      timeRemainingWarning = timeRemainingNegative && this.props.endTime.h !== \"\" && this.props.endTime.m !== \"\"\r\n    }\r\n    else{\r\n      // used if the currentTime or settings aren't available yet -> faster load time\r\n      totalProjectTime = totalBreakTime = 0\r\n      timeNeeded = timeRemaining = {h: 0, m: 0, pm: false}\r\n      timeNeededWarning = timeRemainingNegative = timeRemainingWarning = false\r\n    }\r\n\r\n\r\n    let timeNeededCell = (\r\n      <div>\r\n        <div className=\"timeStatsLabelDiv\">\r\n          <label style={{right: \"1.42rem\"}}>\r\n            Time needed:\r\n          </label>\r\n        </div>\r\n        {TimeCalc.makeString(timeNeeded, false)}\r\n      </div>\r\n    )\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <Grid item className={\"timeStatsSideGridItem\" + (timeNeededWarning ? \" timeStatsWarning\" : null)}>\r\n          {totalProjectTime && totalBreakTime ? (\r\n            <Tooltip title={\r\n              \"Projects: \" + TimeCalc.makeString(totalProjectTime, false) + \", breaks: \" + TimeCalc.makeString(totalBreakTime, false)\r\n            }>\r\n            {timeNeededCell}\r\n            </Tooltip>\r\n          ) : timeNeededCell}\r\n        </Grid>\r\n        <Grid item>\r\n          <h4>\r\n            {TimeCalc.makeString(this.props.currentTime, true, false, this.props.settings.timeFormat24H)}\r\n          </h4>\r\n        </Grid>\r\n        <Grid item className={\"timeStatsSideGridItem\" + (timeRemainingWarning ? \" timeStatsWarning\" : null)}>\r\n          <div className=\"timeStatsLabelDiv\">\r\n            <label style={{right: \"1.825rem\"}}>\r\n              Time remaining:\r\n            </label>\r\n          </div>\r\n          {timeRemainingNegative ? \"0:00\" : TimeCalc.makeString(timeRemaining, false)}\r\n        </Grid>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Input from '@material-ui/core/Input';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport TimeSetter from './TimeSetter'\r\nimport TimeCalc from './util/TimeCalc'\r\n\r\nexport default class BreaksDrawer extends Component{\r\n  constructor(props){\r\n    super(props)\r\n    let breaks = JSON.parse(JSON.stringify(props.breaks))\r\n    let newBreak = {}\r\n\r\n    // if there are any breaks...\r\n    if(breaks.length){\r\n      // set the default value of newBreak\r\n      newBreak.startTime = TimeCalc.add(breaks[breaks.length - 1].endTime, 90)\r\n      newBreak.endTime = TimeCalc.add(newBreak.startTime, 30)\r\n    }\r\n\r\n    // if there aren't any, set the default value\r\n    else{\r\n      newBreak.startTime = TimeCalc.round(TimeCalc.add(props.currentTime, 90), 15)\r\n      newBreak.endTime = TimeCalc.add(newBreak.startTime, 30)\r\n    }\r\n\r\n    newBreak.name = \"\"\r\n\r\n    // store the length of breaks\r\n    let breakDurations = {\r\n      new: 30\r\n    }\r\n    for(let i = 0; i < breaks.length; i++){\r\n      let breakId = breaks[i].id\r\n      breakDurations[breakId] = TimeCalc.subtractToMinutes(breaks[i].endTime, breaks[i].startTime, true)\r\n    }\r\n\r\n    this.state = {\r\n      breaks,\r\n      newBreak,\r\n      breakDurations,\r\n      errors: {},\r\n      showEndTimeErrors: {},\r\n      temp: {\r\n        showEndTimeErrors: {}\r\n      }\r\n    }\r\n  }\r\n\r\n  handleInputChange(breakId, propertyId, e){\r\n    let val = e.target.value\r\n\r\n    if(breakId === \"new\"){\r\n      let newBreak = this.state.newBreak\r\n      newBreak[propertyId] = val\r\n      this.setState({newBreak})\r\n    }\r\n    else{\r\n      let breaks = this.state.breaks\r\n      let index = breaks.findIndex(el => el.id === breakId)\r\n      breaks[index][propertyId] = val\r\n\r\n      this.setState({breaks})\r\n      this.props.onSave(breaks)\r\n    }\r\n  }\r\n\r\n  validateEndTime = (breakId, startTime, endTime) => {\r\n    let temp = this.state.temp\r\n    let showEndTimeErrors = this.state.showEndTimeErrors\r\n\r\n    let success\r\n\r\n    if(!TimeCalc.isBiggerThan(endTime, startTime, false, true)){\r\n      success = false\r\n\r\n      temp.showEndTimeErrors[breakId] = setTimeout(() => {\r\n        this.setState({\r\n          showEndTimeErrors: {\r\n            ...this.state.showEndTimeErrors,\r\n            [breakId]: true\r\n          }\r\n        })\r\n      }, 500)\r\n    }\r\n    else{\r\n      success = true\r\n\r\n      showEndTimeErrors[breakId] = false\r\n      clearTimeout(temp.showEndTimeErrors[breakId])\r\n    }\r\n\r\n    this.setState({temp, showEndTimeErrors})\r\n    return success\r\n  }\r\n\r\n  handleTimeInputChange(breakId, propertyId, inputId, val){\r\n    if(breakId === \"new\"){\r\n      let newBreak = this.state.newBreak\r\n      let breakDurations = this.state.breakDurations\r\n\r\n      newBreak[propertyId][inputId] = val\r\n\r\n      if(val !== \"\"){\r\n        if(propertyId === \"startTime\"){\r\n          newBreak.endTime = TimeCalc.add(newBreak.startTime, breakDurations.new)\r\n        }\r\n\r\n        if(propertyId === \"endTime\"){\r\n          this.validateEndTime(breakId, newBreak.startTime, newBreak.endTime)\r\n\r\n          breakDurations.new = TimeCalc.subtractToMinutes(newBreak.endTime, newBreak.startTime, true)\r\n        }\r\n      }\r\n\r\n      this.setState({newBreak, breakDurations})\r\n    }\r\n\r\n    else{\r\n      let breaks = this.state.breaks\r\n      let breakDurations = this.state.breakDurations\r\n      let index = breaks.findIndex(el => el.id === breakId)\r\n      breaks[index][propertyId][inputId] = val /// SOMEHOW CHANGES THIS.PROPS.BREAKS\r\n\r\n      let success = true\r\n\r\n      if(val === \"\") success = false\r\n      else {\r\n        if(propertyId === \"startTime\"){\r\n          breaks[index].endTime = TimeCalc.add(breaks[index].startTime, breakDurations[breakId])\r\n        }\r\n\r\n        if(propertyId === \"endTime\"){\r\n          success = this.validateEndTime(breakId, breaks[index].startTime, breaks[index].endTime)\r\n\r\n          breakDurations[index] = TimeCalc.subtractToMinutes(breaks[index].endTime, breaks[index].startTime, true)\r\n          this.setState({breakDurations})\r\n        }\r\n      }\r\n\r\n      let errors = this.state.errors\r\n      errors[breakId] = !success\r\n      let canClose = Object.values(errors).every(x => !x)\r\n\r\n      this.setState({breaks, errors})\r\n      this.props.onSave(breaks, canClose)\r\n    }\r\n  }\r\n\r\n  addBreak = () => {\r\n    if(this.state.showEndTimeErrors.new) return\r\n\r\n    let breaks = this.state.breaks\r\n    let newBreak = this.state.newBreak\r\n\r\n    // assign an id one bigger than the current biggest one\r\n    let highestId = -1\r\n    for(let i = 0; i < breaks.length; i++) if(breaks[i].id > highestId) highestId = breaks[i].id\r\n    let newId = highestId + 1\r\n\r\n    newBreak.id = newId\r\n\r\n    breaks.push(newBreak)\r\n\r\n    this.setState({breaks})\r\n    this.props.onSave(breaks)\r\n\r\n    let breakDurations = this.state.breakDurations\r\n    breakDurations.new = 30\r\n    breakDurations[newId] = TimeCalc.subtractToMinutes(newBreak.endTime, newBreak.startTime, true)\r\n\r\n    this.setState({\r\n      newBreak: {\r\n        startTime: TimeCalc.add(newBreak.endTime, 90),\r\n        endTime: TimeCalc.add(newBreak.endTime, 120),\r\n        name: \"\"\r\n      },\r\n      breakDurations\r\n    })\r\n  }\r\n\r\n  deleteBreak(id){\r\n    let breaks = this.state.breaks\r\n    let index = breaks.findIndex(el => el.id === id)\r\n    breaks.splice(index, 1)\r\n\r\n    let errors = this.state.errors\r\n    delete errors[id]\r\n    let canClose = Object.values(errors).every(x => !x)\r\n\r\n    this.setState({breaks, errors})\r\n    this.props.onSave(breaks, canClose)\r\n  }\r\n\r\n  handleSave = () => {\r\n    this.props.onClose()\r\n  }\r\n\r\n  handleEnterPress = e => {\r\n    if(e.key === \"Enter\") this.addBreak()\r\n  }\r\n\r\n  handleEnterPressNew = e => {\r\n    if(e.key === \"Enter\") this.addBreak()\r\n  }\r\n\r\n\r\n  render(){\r\n    let rows = this.state.breaks.map((breakInfo, i) => {\r\n      return (\r\n        <TableRow key={breakInfo.id}>\r\n          <TableCell>\r\n            <Input\r\n              value={breakInfo.name}\r\n              onChange={this.handleInputChange.bind(this, breakInfo.id, \"name\")}\r\n              onKeyPress={this.handleEnterPress}\r\n            />\r\n          </TableCell>\r\n          <TableCell>\r\n            <TimeSetter\r\n              value={breakInfo.startTime}\r\n              onChange={this.handleTimeInputChange.bind(this, breakInfo.id, \"startTime\")}\r\n              onEnterPress={this.handleSave}\r\n            />\r\n          </TableCell>\r\n          <TableCell>\r\n            <TimeSetter\r\n              value={breakInfo.endTime}\r\n              onChange={this.handleTimeInputChange.bind(this, breakInfo.id, \"endTime\")}\r\n              onEnterPress={this.handleSave}\r\n              showError={this.state.showEndTimeErrors[breakInfo.id]}\r\n            />\r\n          </TableCell>\r\n          <TableCell>\r\n            <IconButton onClick={this.deleteBreak.bind(this, breakInfo.id)}>\r\n              <DeleteIcon />\r\n            </IconButton>\r\n          </TableCell>\r\n        </TableRow>\r\n      )\r\n    })\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <Typography variant=\"h6\">Breaks:</Typography>\r\n        <Table className=\"BreaksDrawer\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell>Name (optional)</TableCell>\r\n              <TableCell>Start</TableCell>\r\n              <TableCell>End</TableCell>\r\n              <TableCell/>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {rows.length ? rows : (\r\n              <TableRow>\r\n                <TableCell colSpan={4}>You haven't set any breaks</TableCell>\r\n              </TableRow>\r\n            )}\r\n            <TableRow>\r\n              <TableCell>\r\n                <Input\r\n                  value={this.state.newBreak.name}\r\n                  onChange={this.handleInputChange.bind(this, \"new\", \"name\")}\r\n                  onKeyPress={this.handleEnterPressNew}\r\n                />\r\n              </TableCell>\r\n              <TableCell>\r\n                <TimeSetter\r\n                  value={this.state.newBreak.startTime}\r\n                  onChange={this.handleTimeInputChange.bind(this, \"new\", \"startTime\")}\r\n                  onEnterPress={this.addBreak}\r\n                />\r\n              </TableCell>\r\n              <TableCell>\r\n                <TimeSetter\r\n                  value={this.state.newBreak.endTime}\r\n                  onChange={this.handleTimeInputChange.bind(this, \"new\", \"endTime\")}\r\n                  onEnterPress={this.addBreak}\r\n                  showError={this.state.showEndTimeErrors.new}\r\n                />\r\n              </TableCell>\r\n              <TableCell>\r\n                <IconButton color=\"primary\" onClick={this.addBreak}>\r\n                  <AddIcon />\r\n                </IconButton>\r\n              </TableCell>\r\n            </TableRow>\r\n          </TableBody>\r\n        </Table>\r\n        <Grid container justify=\"center\">\r\n          <Button\r\n            onClick={this.handleSave.bind(this)}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            style={{margin: \".5rem\"}}>\r\n            Save\r\n          </Button>\r\n        </Grid>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react';\nimport ModeSwitch from './ModeSwitch'\nimport ProjectsTable from './ProjectsTable'\nimport EndTimeSetter from './EndTimeSetter'\nimport TimeStats from './TimeStats'\nimport BreaksDrawer from './BreaksDrawer'\nimport Grid from '@material-ui/core/Grid'\nimport Button from '@material-ui/core/Button';\nimport Drawer from '@material-ui/core/Drawer';\nimport { Link } from \"react-router-dom\";\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport HelpIcon from '@material-ui/icons/Help';\nimport TimeCalc, { setTimesForProjects } from './util/TimeCalc'\nimport { SettingsContext } from './_Context'\n\nexport default class App extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      projects: [],\n      breaks: [],\n      mode: \"planning\",\n      startTime: {},\n      endTime: {\n        h: 11,\n        m: \"00\",\n        pm: true\n      },\n      currentTime: {\n        h: 0,\n        m: 0,\n        pm: true\n      },\n      settings: this.props.settings,\n      showErrors: {\n        endTime: false,\n        noProjects: false\n      },\n      showResetButton: false,\n      defaultColorIndex: undefined,\n      temp: {}\n    }\n  }\n\n  componentDidMount(){\n    // get data from localStorage\n    let projects, breaks, startTime, endTime, mode\n\n    // handle undefined, set defaults\n    try {\n      projects = JSON.parse(localStorage.projects)\n    } catch (e) {\n      projects = []\n    }\n\n    try {\n      breaks = JSON.parse(localStorage.breaks)\n    } catch (e) {\n      breaks = []\n    }\n\n    try {\n      startTime = JSON.parse(localStorage.startTime)\n    } catch (e) {\n      startTime = {h: 2, m: \"00\", pm: true}\n    }\n\n    try {\n      endTime = JSON.parse(localStorage.endTime)\n    } catch (e) {\n      endTime = {h: 11, m: \"00\", pm: true}\n    }\n\n    try {\n      mode = JSON.parse(localStorage.mode)\n    } catch (e) {\n      mode = \"planning\"\n    }\n\n    let defaultColorIndex = localStorage.defaultColorIndex ? localStorage.defaultColorIndex : 0\n\n    this.setState({projects, breaks, startTime, endTime, mode, defaultColorIndex})\n  }\n\n  componentDidUpdate(){\n    // only update if it's the init with data from localStorage\n    if(!Object.keys(this.state.settings).length && this.props.settings){\n      this.setState({settings: this.props.settings})\n      this.setShowResetButton()\n    }\n\n    // save to localStorage\n    localStorage.projects = JSON.stringify(this.state.projects)\n    localStorage.breaks = JSON.stringify(this.state.breaks)\n    localStorage.startTime = JSON.stringify(this.state.startTime)\n    localStorage.endTime = JSON.stringify(this.state.endTime)\n    localStorage.mode = JSON.stringify(this.state.mode)\n    localStorage.defaultColorIndex = this.state.defaultColorIndex\n\n    // save the time of the last time when there were no projects (to let the app offer to clear projects after midnight)\n    if(!this.state.projects.length){\n      localStorage.lastReset = new Date()\n      localStorage.removeItem(\"productivityPercentage\")\n    }\n  }\n\n  // internal method, used in componentDidMount and componentDidUpdate\n  setShowResetButton = () => {\n    let condition1, condition2\n\n    // show the reset button if 5AM is between lastReset and currentTime\n    let lastResetInMs = new Date(localStorage.lastReset).getTime() // ms since 1970\n    lastResetInMs = lastResetInMs % (24*60*60*1000)\n    let lastResetInMinutes = lastResetInMs / 1000 / 60\n    condition1 = TimeCalc.isBiggerThan(lastResetInMinutes, this.state.currentTime, false, true)\n\n    // only check for condition2 if condition1 doesn't check out\n    if(!condition1){\n      // show the reset button if lastReset + showResetButtonAfter > currentTime\n      let lastReset = new Date(localStorage.lastReset)\n      let settings = this.state.settings.showResetButtonAfter ? this.state.settings : this.props.settings\n      let showResetButtonAfter = settings.showResetButtonAfter\n      lastReset.setTime(lastReset.getTime() + (showResetButtonAfter * 60 * 60 * 1000))\n      condition2 = lastReset < new Date()\n    }\n\n    // only one of the two needs to be true to show the reset button\n    let showResetButton = condition1 || condition2\n    this.setState({showResetButton})\n  }\n\n  // internal method, used when auto detecting breaks\n  addBreak = (startTime, endTime) => {\n    let breaks = this.state.breaks\n\n    // find the highest id\n    let highestId = -1\n    for(let i = 0; i < breaks.length; i++){\n\n      // check if the break overlaps with any preexisting breaks\n      if(\n        (\n          TimeCalc.isBiggerThan(endTime, breaks[i].startTime, false, true) &&\n          TimeCalc.isBiggerThan(breaks[i].startTime, startTime, true, true)\n        ) || (\n          TimeCalc.isBiggerThan(endTime, breaks[i].endTime, false, true) &&\n          TimeCalc.isBiggerThan(breaks[i].endTime, startTime, true, true)\n        )\n      ){\n\n        // if the overlapping break was also autodetected, merge the two\n        if(breaks[i].autodetected){\n\n          // if the other break's startTime is earlier than the new break's start time...\n          if(TimeCalc.isBiggerThan(startTime, breaks[i].startTime, false, true)){\n            // set the startTime to be equal to the previous startTime\n            startTime = breaks[i].startTime\n          }\n\n          // if the other break's endTime is later that the current one...\n          if(TimeCalc.isBiggerThan(breaks[i].endTime, endTime, true, true)){\n            endTime = breaks[i].endTime\n          }\n\n          // finally, remove the other break as it's no longer needed (it'll be merged into the new one)\n          breaks.splice(i, 1)\n        }\n\n        // if the break was manually inserted, move the startTime after the other break\n        else {\n          startTime = breaks[i].endTime\n        }\n      }\n\n      // looking for the highest ID\n      // (first check if the break wasn't deleted)\n      if(breaks[i] && breaks[i].id > highestId) highestId = breaks[i].id\n    }\n\n    // assign an id one bigger than the current biggest one\n    let newId = highestId + 1\n\n    breaks.push({\n      id: newId,\n      name: \"Auto \" + (newId + 1),\n      autodetected: true,\n      startTime, endTime\n    })\n\n    this.setState({breaks})\n    return breaks\n  }\n\n  handleModeChange(val){\n    // don't let the user go into work mode if there isn't an endTime or if projects are empty  (+ show an error)\n    if(val === \"working\"){\n      if(this.state.endTime.h === \"\" || this.state.endTime.m === \"\"){\n        this.setState({showErrors: {...this.state.showErrors, endTime: true}})\n        return\n      }\n      if(!this.state.projects.length){\n        this.setState({showErrors: {...this.state.showErrors, noProjects: true}})\n        return\n      }\n    }\n\n    this.setState({mode: val})\n  }\n\n  handleEndTimeChange(id, val){\n    let newState = {endTime: this.state.endTime, showErrors: this.state.showErrors, temp: this.state.temp}\n    newState.endTime[id] = val\n\n    // show/hide error\n    if(newState.endTime.h === \"\"\n      || newState.endTime.m === \"\"\n      || !TimeCalc.isBiggerThan(newState.endTime, this.state.currentTime, true, true)\n    ){\n      newState.temp.endTimeErrorTimeout = setTimeout(() => {\n        this.setState({showErrors: {...this.state.showErrors, endTime: true}})\n      }, 250)\n    }\n    else{\n      clearTimeout(newState.temp.endTimeErrorTimeout)\n      newState.showErrors.endTime = false\n    }\n\n    this.setState(newState)\n  }\n\n  handleAddProject(project, newDefaultColorIndex){\n    // hide the noProjects error\n    this.setState({showErrors: {...this.state.showErrors, noProjects: false}})\n\n    // copy the state\n    let projects = this.state.projects\n    let settings = this.state.settings\n\n    // find the highest id in projects\n    let highestId = -1\n    for(let i = 0; i < projects.length; i++) if(projects[i].id > highestId) highestId = projects[i].id\n\n    // assign an id one bigger than the current biggest one\n    // (if there are no projects yet then highestId stayed at -1, therefore newId will be 0)\n    let newId = highestId + 1\n\n    // convert\n    let newProject = {\n      id: newId,\n      name: project.name,\n      color: project.color,\n      estimatedDuration: project.duration,\n      plannedTime: {\n        start: project.startTime,\n        end: TimeCalc.add(project.startTime, project.duration)\n      },\n      state:'notStarted'\n    }\n\n    // if the startTime is larger that the suggested time, add a new break\n    if(projects.length){ // don't execute if there are no previous projects\n      let currentLastProject = projects[projects.length - 1]\n      if(\n        settings.detectBreaksAutomatically &&\n        TimeCalc.isBiggerThan(project.startTime,\n          TimeCalc.suggestStartTime(currentLastProject.plannedTime.end, currentLastProject.estimatedDuration, settings),\n          false, true\n        )\n      ){\n        this.addBreak(currentLastProject.plannedTime.end, project.startTime)\n      }\n    }\n\n    // create the newState object , handle undefined for newDefaultColorIndex\n    projects.push(newProject)\n    let newState = {projects}\n    if(newDefaultColorIndex) newState.defaultColorIndex = newDefaultColorIndex\n\n    // if it's the first project being added, save the startTime as well\n    if(projects.length === 1) newState.startTime = projects[0].plannedTime.start\n\n    // save to state\n    this.setState(newState)\n  }\n\n  handleDeleteProject(id){\n    let projects = this.state.projects\n    let settings = this.state.settings\n\n    let index = projects.findIndex(project => project.id === id)\n\n    // if we are updating the timing and if the deleted project is the first one, adjust the next startTime\n    if(settings.updateTimesAfterDelete && index === 0 && projects[1]){\n      projects[1].plannedTime.start = projects[0].plannedTime.start\n    }\n\n    projects.splice(index, 1)\n\n    if(settings.updateTimesAfterDelete) projects = setTimesForProjects(projects, settings, this.state.breaks, this.state.startTime)\n\n    let newState = {projects}\n\n    // if the user just deleted the last remaining project, reset breaks as well\n    if(!projects.length) newState.breaks = []\n\n    this.setState(newState)\n  }\n\n  // switch mode on tab\n  handleRootKeyDown(e){\n    if(this.state.settings.changeModeOnTab && e.key === \"Tab\" && !this.state.temp.openBreaksDrawer){\n      e.preventDefault()\n\n      this.handleModeChange(this.state.mode === \"planning\" ? \"working\" : \"planning\")\n    }\n  }\n\n  handleColorChange(id, val){\n    let projects = this.state.projects\n    let index = projects.findIndex(project => project.id === id)\n    projects[index].color = val\n    this.setState({projects})\n  }\n\n  handleDragEnd(result){\n    this.setState({temp: {...this.state.temp, dragging: false}})\n\n    if(!result.destination) console.log(result);\n    // handle the draggable being drop outside the droppable\n    if(!result.destination) return\n\n    let id = result.draggableId\n    let index = result.destination.index\n    let projects = this.state.projects\n\n    let movedProjectIndex = projects.findIndex(el => el.id === parseInt(id))\n    let movedProject = projects[movedProjectIndex]\n\n    // if the project was dropped at the same spot it was picked up from, stop executing\n    if(index === movedProjectIndex) return\n\n    // store the startTime of the project that is currently first\n    // (for the setTimesForProjects function to work properly)\n    let firstStartTime = projects[0].plannedTime.start\n\n    // remove from the current position\n    projects.splice(movedProjectIndex, 1)\n\n    // add to the new position\n    projects.splice(index, 0, movedProject)\n\n    if(this.state.settings.updateTimesAfterDrag){\n      projects[0].plannedTime.start = firstStartTime\n\n      projects = setTimesForProjects(projects, this.state.settings, this.state.breaks, this.state.startTime)\n    }\n\n    // save\n    this.setState({projects})\n  }\n\n  handleDoneEditingProject(id, values){\n    let projects = this.state.projects\n    let breaks = this.state.breaks\n    let settings = this.state.settings\n\n    let index = projects.findIndex(project => project.id === id)\n\n    // if the user increased the startTime, save a new break\n    if(\n      settings.detectBreaksAutomatically &&\n      index !== 0 &&\n      TimeCalc.isBiggerThan(values.startTime, projects[index].plannedTime.start, false, true)\n    ){\n      breaks = this.addBreak(\n        TimeCalc.suggestStartTime(projects[index - 1].plannedTime.end, projects[index - 1].estimatedDuration, settings),\n        values.startTime\n      )\n    }\n\n    // if the user decreased the startTime, check to see if any breaks need to adjusted\n    if(\n      settings.detectBreaksAutomatically &&\n      index !== 0 &&\n      TimeCalc.isBiggerThan(projects[index].plannedTime.start, values.startTime, false, true)\n    ){\n      for(let i = 0; i < breaks.length; i++){\n        // if an autodetected break was previously right before the project being editted, adjust it\n        if(\n          breaks[i].autodetected &&\n          TimeCalc.areIdentical(projects[index].plannedTime.start, breaks[i].endTime)\n        ){\n          breaks[i].endTime = values.startTime\n        }\n      }\n    }\n\n    // check if any time values were changed (so that we don't unnecessarily recalculate project times)\n    let durationChanged = parseInt(projects[index].estimatedDuration) !== parseInt(values.duration)\n    let startTimeChanged = !TimeCalc.areIdentical(projects[index].plannedTime.start, values.startTime)\n\n    // change the values\n    projects[index].name = values.name\n    projects[index].estimatedDuration = values.duration\n    projects[index].plannedTime.start = values.startTime\n\n    // if the user wants to update all times, do so\n    if(this.state.settings.updateTimesAfterEdit && (durationChanged || startTimeChanged)){\n      let startTime = index === 0 ? values.startTime : this.state.startTime\n      projects = setTimesForProjects(projects, settings, breaks, startTime)\n    }\n\n    // else simply adjust the endTime\n    else projects[index].plannedTime.end = TimeCalc.add(projects[index].plannedTime.start, projects[index].estimatedDuration)\n\n    // create the newState object\n    let newState = {projects}\n\n    // if the startTime of the first project was changed, adjust this.state.startTime accordingly\n    if(index === 0) newState.startTime = projects[index].plannedTime.start\n\n    // save to state\n    this.setState(newState)\n  }\n\n  handleProjectStateChange(id, val, progress){\n    let projects = this.state.projects\n\n    projects.map(project => {\n      // set the state of the changed project\n      if(project.id === id){\n        project.state = val\n\n        // if it's being paused, set progress\n        if(val === \"paused\" && !isNaN(parseInt(progress))) project.progress = progress\n\n        // if it's being changed to workingOnIt, save current time\n        if(val === \"workingOnIt\") project.startedWorkingOnIt = this.state.currentTime\n      }\n\n      // if a project's state is being changed to workingOnIt, pause any other projects with the same state\n      if(val === \"workingOnIt\" && project.state === \"workingOnIt\" && project.id !== id) project.state = \"paused\"\n\n      return project\n    })\n\n    this.setState({projects})\n  }\n\n  handleCurrentTimeChange(time){\n    this.setState({currentTime: time})\n  }\n\n  resetState(){\n    if(window.confirm(\"Are you sure you want to delete all your projects?\")){\n      this.setState({projects: [], breaks: [], mode: \"planning\", showResetButton: false})\n    }\n  }\n\n  handleEndTimeValidation(success){\n    let showErrors = this.state.showErrors\n    showErrors.endTime = success\n    this.setState({showErrors})\n    console.log({showErrors: {...this.state.showErrors, endTime:success}});\n  }\n\n  openBreaksDrawer(){\n    this.setState({temp: {...this.state.temp, openBreaksDrawer: true}})\n  }\n\n  closeBreaksDrawer = () => {\n    if(typeof this.state.temp.canCloseBreaksDrawer === \"undefined\" ||\n      this.state.temp.canCloseBreaksDrawer ||\n      window.confirm(\"Some of the breaks weren't editted properly. If you close this now, those changes will be lost\")\n    ) this.setState({temp: {...this.state.temp, openBreaksDrawer: false, canCloseBreaksDrawer: undefined}})\n  }\n\n  saveBreaks(breaks, canClose){\n    if(typeof canClose === \"undefined\" || canClose){\n      let projects = this.state.projects\n      if(this.state.projects.length){\n        projects = setTimesForProjects(projects, this.state.settings, breaks, this.state.startTime)\n      }\n\n      let temp = this.state.temp\n      if(typeof canClose !== \"undefined\") temp.canCloseBreaksDrawer = canClose\n\n      this.setState({projects, breaks: JSON.parse(JSON.stringify(breaks)), temp})\n    }\n    else this.setState({temp: {...this.state.temp, canCloseBreaksDrawer: false}})\n  }\n\n  render() {\n    // speed up the load (wouldn't make sense to do all the processing if there are no projects)\n    let allProjectsDone = false\n    let productivityPercentage, totalTimeWorkedString\n\n    if(this.state.projects.length){\n      allProjectsDone = true\n      for(let i = 0; i < this.state.projects.length; i++){\n        if(this.state.projects[i].state !== \"done\"){\n          allProjectsDone = false\n          break\n        }\n      }\n\n      if(allProjectsDone){\n        let totalTimeWorked = 0\n\n        for(let i = 0; i < this.state.projects.length; i++) totalTimeWorked += parseInt(this.state.projects[i].estimatedDuration)\n\n        if(totalTimeWorked >= 60) totalTimeWorkedString = TimeCalc.makeString(TimeCalc.toTimeObject(totalTimeWorked, false), false)\n        else totalTimeWorkedString += \" minutes\"\n\n        // if the productivityPercentage was already stored, use it\n        if(localStorage.productivityPercentage){\n          productivityPercentage = localStorage.productivityPercentage\n        }\n        // else calculate and store it\n        else {\n          let totalTimePassed = TimeCalc.subtractToMinutes(this.state.currentTime, this.state.startTime, true)\n          productivityPercentage = Math.round(100 * totalTimeWorked / totalTimePassed)\n          localStorage.productivityPercentage = productivityPercentage\n        }\n      }\n\n      else localStorage.removeItem(\"productivityPercentage\")\n    }\n    else allProjectsDone = false\n\n    return (\n      <Grid\n        className=\"App\"\n        onKeyDown={this.handleRootKeyDown.bind(this)}\n        tabIndex=\"0\">\n        <ModeSwitch\n          mode={this.state.mode}\n          onModeChange={this.handleModeChange.bind(this)}>\n          <TimeStats\n            currentTime={this.state.currentTime}\n            onCurrentTimeChange={this.handleCurrentTimeChange.bind(this)}\n            endTime={this.state.endTime}\n            projects={this.state.projects}\n            breaks={this.state.breaks}\n            settings={this.state.settings}\n          />\n        </ModeSwitch>\n        <Grid container>\n          <SettingsContext.Provider value={this.state.settings}>\n            <ProjectsTable\n              mode={this.state.mode}\n              projects={this.state.projects}\n              settings={this.state.settings}\n              currentTime={this.state.currentTime}\n              defaultColorIndex={this.state.defaultColorIndex}\n              showErrors={this.state.showErrors}\n              onColorChange={this.handleColorChange.bind(this)}\n              onDoneEditing={this.handleDoneEditingProject.bind(this)}\n              onAddProject={this.handleAddProject.bind(this)}\n              onProjectStateChange={this.handleProjectStateChange.bind(this)}\n              onDeleteProject={this.handleDeleteProject.bind(this)}\n              onDragEnd={this.handleDragEnd.bind(this)}/>\n            {\n              this.state.mode === \"planning\" ?\n              // planning mode\n              (\n                <React.Fragment>\n                  <EndTimeSetter\n                    onChange={this.handleEndTimeChange.bind(this)}\n                    value={this.state.endTime}\n                    showError={this.state.showErrors.endTime}/>\n                  <Grid container justify=\"center\">\n                    <Button\n                      onClick={this.openBreaksDrawer.bind(this)}\n                      variant=\"contained\"\n                      style={{marginBottom: \"1rem\"}}>\n                      Set/Edit breaks\n                    </Button>\n                  </Grid>\n                  <Grid container justify=\"center\">\n                    <Button\n                      onClick={this.handleModeChange.bind(this, \"working\")}\n                      variant=\"contained\"\n                      color=\"primary\">\n                      Let's get to work!\n                    </Button>\n                  </Grid>\n                  <Drawer id=\"BreaksDrawer\" anchor=\"bottom\" open={this.state.temp.openBreaksDrawer} onClose={this.closeBreaksDrawer}>\n                    <BreaksDrawer\n                      breaks={this.state.breaks}\n                      currentTime={this.state.currentTime}\n                      onSave={this.saveBreaks.bind(this)}\n                      onClose={this.closeBreaksDrawer}\n                    />\n                  </Drawer>\n                </React.Fragment>\n              )\n              :\n              // working mode\n              (\n                allProjectsDone && (\n                  <div id=\"congratsDiv\">\n                    <span id=\"congrats\">\n                      CONGRATULATIONS!\n                    </span>\n                    <br/>\n                    You got {totalTimeWorkedString} worth of work done\n                    <br/>\n                    You were productive {productivityPercentage}% of the time\n                  </div>\n                )\n              )\n            }\n            {this.state.showResetButton && (\n              <Grid container justify=\"flex-end\" alignItems=\"flex-end\" style={{marginTop: \"2rem\"}}>\n                <Button\n                  onClick={this.resetState.bind(this)}\n                  variant=\"contained\">\n                  Reset\n                </Button>\n              </Grid>\n            )}\n          </SettingsContext.Provider>\n        </Grid>\n        <Link id=\"linkToSettings\" to=\"/settings\" aria-label=\"Settings\">\n          <SettingsIcon />\n        </Link>\n        <Link id=\"linkToAbout\" to=\"/about\" aria-label=\"About\">\n          <HelpIcon />\n        </Link>\n      </Grid>\n    );\n  }\n}\n","import React, { Component } from 'react';\r\nimport ColorPicker from './ColorPicker'\r\nimport Input from '@material-ui/core/Input';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport Button from '@material-ui/core/Button';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Icon from '@material-ui/core/Icon'\r\nimport './Settings.css'\r\n\r\nconst sectionInfo = {\r\n  general: {\r\n    order: 0,\r\n    label: \"General settings\",\r\n    icon: \"settings\"\r\n  },\r\n  detection: {\r\n    order: 1,\r\n    label: \"Automatic detection\",\r\n    icon: \"search\"\r\n  },\r\n  misc: {\r\n    order: 2,\r\n    label: \"Miscellaneous\",\r\n    icon: \"menu\"\r\n  },\r\n}\r\n\r\nconst inputInfo = {\r\n  timeFormat24H: {\r\n    label: \"Use the 24-hour time format\",\r\n    type: \"boolean\",\r\n    section: \"general\",\r\n    order: 0,\r\n    icon: \"timer\"\r\n  },\r\n  bufferTimePercentage: {\r\n    label: \"Bufffer time percentage\",\r\n    type: \"percentage\",\r\n    max: 1,\r\n    tooltip: \"Buffer times are short breaks inserted after each project. Their length depends on the length of the project before them. This field determines what percentage of the previous project's duration the buffer will be.\",\r\n    section: \"general\",\r\n    order: 1,\r\n    icon: \"view_week\"\r\n  },\r\n  showResetButtonAfter: {\r\n    label: \"Show reset button after (hours)\",\r\n    type: \"int\",\r\n    section: \"misc\",\r\n    order: 3,\r\n    icon: \"restore\"\r\n  },\r\n  defaultColors: {\r\n    label: \"Default colors:\",\r\n    type: \"colors\",\r\n    section: \"misc\",\r\n    order: 0,\r\n    icon: \"invert_colors\"\r\n  },\r\n  updateTimesAfterDrag: {\r\n    label: \"Adjust planned times after changing the order of projects\",\r\n    type: \"boolean\",\r\n    section: \"detection\",\r\n    order: 0,\r\n    icon: \"swap_vert\"\r\n  },\r\n  updateTimesAfterEdit: {\r\n    label: \"Adjust planned times after editing a project\",\r\n    type: \"boolean\",\r\n    section: \"detection\",\r\n    order: 1,\r\n    icon: \"edit\"\r\n  },\r\n  updateTimesAfterDelete: {\r\n    label: \"Adjust planned times after deleting a project\",\r\n    type: \"boolean\",\r\n    section: \"detection\",\r\n    order: 2,\r\n    icon: \"delete\"\r\n  },\r\n  roundTo: {\r\n    label: \"Round to (minutes)\",\r\n    type: \"int\",\r\n    section: \"misc\",\r\n    order: 2,\r\n    icon: \"access_time\"\r\n  },\r\n  changeModeOnTab: {\r\n    label: \"Change mode when the Tab key is pressed\",\r\n    type: \"boolean\",\r\n    section: \"misc\",\r\n    order: 1,\r\n    icon: \"redo\"\r\n  },\r\n  detectBreaksAutomatically: {\r\n    label: \"Detect breaks automatically\",\r\n    type: \"boolean\",\r\n    section: \"detection\",\r\n    order: 3,\r\n    icon: \"pause\"\r\n  }\r\n}\r\n\r\nexport default class Settings extends Component{\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      inputs: this.props.settings,\r\n      showErrors: {}\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(){\r\n    // only update if it's the init with data from localStorage\r\n    if(!Object.keys(this.state.inputs).length && this.props.settings){\r\n      this.setState({inputs: this.props.settings})\r\n    }\r\n  }\r\n\r\n  handleInputChange(id, e){\r\n    let val = inputInfo[id].type === \"boolean\" ? e.target.checked : e.target.value\r\n\r\n    // validation\r\n    switch (inputInfo[id].type) {\r\n      case \"int\":\r\n        if(isNaN(val) && val !== \"\") return\r\n        break;\r\n      case \"percentage\":\r\n        let percentage = val.split(\"%\")[0]\r\n        if(percentage !== \"\") val = percentage / 100\r\n        if(isNaN(val) && val !== \"%\") return // if NaN, empty or last character is . (eg. 0.)\r\n        break;\r\n      default:\r\n    }\r\n    if(typeof inputInfo[id].max !== \"undefined\" && val > inputInfo[id].max) return\r\n\r\n    let newState = {inputs: this.state.inputs, showErrors: this.state.showErrors}\r\n    newState.inputs[id] = val\r\n    newState.showErrors[id] = false\r\n    this.setState({newState})\r\n  }\r\n\r\n  handleDefaultColorChange(i, val){\r\n    let newState = this.state.inputs.defaultColors\r\n    newState[i] = val\r\n    this.setState({inputs: {...this.state.inputs, defaultColors: newState}})\r\n  }\r\n\r\n  handleAddDefaultColor(){\r\n    let newState = this.state.inputs.defaultColors\r\n    newState.push(\"#000000\")\r\n    this.setState({inputs: {...this.state.inputs, defaultColors: newState}})\r\n  }\r\n\r\n  handleRemoveDefaultColor(i){\r\n    let newState = this.state.inputs.defaultColors\r\n    newState.splice(i, 1)\r\n    this.setState({inputs: {...this.state.inputs, defaultColors: newState}})\r\n  }\r\n\r\n  handleSave(){\r\n    // validation (for empty percentage)\r\n    let inputs = this.state.inputs\r\n    let keys = Object.keys(inputs)\r\n    for(let i = 0; i < keys.length; i++){\r\n      if(inputInfo[keys[i]] && inputInfo[keys[i]].type === \"percentage\" && inputs[keys[i]] === \"%\"){\r\n        let showErrors = this.state.showErrors\r\n        showErrors[keys[i]] = true\r\n        this.setState({showErrors})\r\n        return\r\n      }\r\n    }\r\n\r\n    this.props.onSettingsChange(inputs)\r\n    this.props.history.push(\"/\")\r\n  }\r\n\r\n  handleResetToDefault(){\r\n    if(window.confirm(\"Are you sure you want to reset your settings back to default?\")){\r\n      this.setState({inputs: this.props.defaultSettings})\r\n      this.props.onSettingsChange(this.props.defaultSettings)\r\n    }\r\n  }\r\n\r\n  render(){\r\n    let inputKeysSorted = Object.keys(this.state.inputs).sort((a, b) => {\r\n      let sectionA = inputInfo[a].section\r\n      let sectionB = inputInfo[b].section\r\n      let sectionAOrder = sectionInfo[sectionA].order\r\n      let sectionBOrder = sectionInfo[sectionB].order\r\n\r\n      // if each is in a different section, sort by that\r\n      if(sectionAOrder !== sectionBOrder) return sectionAOrder > sectionBOrder ? 1 : -1\r\n      // if they're both in the same section, sort by their own order\r\n      else return inputInfo[a].order > inputInfo[b].order ? 1 : -1\r\n    })\r\n\r\n    let inputs = inputKeysSorted.map((el, i) => {\r\n      let tableRow\r\n\r\n      if(el === \"defaultColors\") tableRow = (\r\n        <TableRow key={i}>\r\n          <TableCell className=\"iconCell\">\r\n            <Icon>{inputInfo[el].icon}</Icon>\r\n          </TableCell>\r\n          <TableCell>\r\n            Default colors:\r\n          </TableCell>\r\n          <TableCell id=\"defaultColorsCell\">\r\n            {\r\n              this.state.inputs.defaultColors.map((color, i) => (\r\n                <div key={i}>\r\n                  <ColorPicker\r\n                    value={this.state.inputs.defaultColors[i]}\r\n                    onChange={this.handleDefaultColorChange.bind(this, i)}\r\n                  />\r\n                  <div className=\"removeDefaultColorDiv\">\r\n                    <IconButton\r\n                      aria-label=\"Remove the color\"\r\n                      className=\"removeDefaultColor\"\r\n                      disableRipple={true}\r\n                      onClick={this.handleRemoveDefaultColor.bind(this, i)}>\r\n                      <Icon>remove</Icon>\r\n                    </IconButton>\r\n                  </div>\r\n                </div>\r\n              ))\r\n            }\r\n            <IconButton\r\n              id=\"addDefaultColor\"\r\n              aria-label=\"Add a new default color\"\r\n              onClick={this.handleAddDefaultColor.bind(this)}>\r\n              <Icon>add</Icon>\r\n            </IconButton>\r\n          </TableCell>\r\n          <TableCell className=\"rightCell\" />\r\n        </TableRow>\r\n      )\r\n      else{\r\n        // handle undefined inputInfo\r\n        if(!inputInfo[el]){\r\n          console.warn(el + \"is not a property of inputInfo\");\r\n          return <div />\r\n        }\r\n        tableRow =  (\r\n          <TableRow key={i}>\r\n            <TableCell className=\"iconCell\">\r\n              <Icon>{inputInfo[el].icon}</Icon>\r\n            </TableCell>\r\n            <TableCell>\r\n              {inputInfo[el].label}\r\n              {inputInfo[el].tooltip && (\r\n                <Tooltip title={inputInfo[el].tooltip}>\r\n                  <Icon className=\"tooltipIcon\">help</Icon>\r\n                </Tooltip>\r\n              )}\r\n              :\r\n            </TableCell>\r\n            <TableCell>\r\n              {\r\n                inputInfo[el].type === \"boolean\" ? (\r\n                  <Switch\r\n                    color=\"primary\"\r\n                    checked={this.state.inputs[el]}\r\n                    onChange={this.handleInputChange.bind(this, el)}\r\n                    aria-label={inputInfo[el].label}\r\n                  />\r\n                ) : (\r\n                  <Input\r\n                    value={\r\n                      (inputInfo[el].type === \"percentage\" && this.state.inputs[el] !== \"%\") ? (\r\n                        this.state.inputs[el] * 100 + \"%\"\r\n                      ) : (this.state.inputs[el])\r\n                    }\r\n                    onChange={this.handleInputChange.bind(this, el)}\r\n                    error={this.state.showErrors[el]}\r\n                    aria-label={inputInfo[el].label}\r\n                  />\r\n                )\r\n              }\r\n            </TableCell>\r\n            <TableCell className=\"rightCell\" />\r\n          </TableRow>\r\n        )\r\n      }\r\n\r\n      // if this and the previous element are in the same section, return\r\n      if(i && inputInfo[el].section === inputInfo[inputKeysSorted[i-1]].section) return tableRow\r\n      // if they're each in a different section\r\n      else return (\r\n        <React.Fragment key={i}>\r\n          <TableRow>\r\n            <TableCell className=\"sectionIconCell\">\r\n              <Icon>{sectionInfo[inputInfo[el].section].icon}</Icon>\r\n            </TableCell>\r\n            <TableCell colSpan={2}>\r\n              <Typography variant=\"h5\" style={{paddingTop: \"2.5rem\"}}>\r\n                {sectionInfo[inputInfo[el].section].label}:\r\n              </Typography>\r\n            </TableCell>\r\n            <TableCell className=\"rightCell\" />\r\n          </TableRow>\r\n          {tableRow}\r\n        </React.Fragment>\r\n      )\r\n    })\r\n\r\n    return (\r\n      <div className=\"Settings\">\r\n        <Table>\r\n          <TableBody>\r\n            {inputs.map(input => input)}\r\n            <TableRow>\r\n              <TableCell colSpan={4}>\r\n                <Grid\r\n                  container\r\n                  alignItems='baseline'\r\n                  justify=\"space-around\"\r\n                >\r\n                  <Grid>\r\n                    <Button\r\n                      onClick={this.handleSave.bind(this)}\r\n                      variant=\"contained\"\r\n                      color=\"primary\">\r\n                      Save\r\n                    </Button>\r\n                  </Grid>\r\n                  <Grid>\r\n                    <Button\r\n                      onClick={this.handleResetToDefault.bind(this)}\r\n                      variant=\"contained\">\r\n                      Reset to default\r\n                    </Button>\r\n                  </Grid>\r\n                </Grid>\r\n              </TableCell>\r\n            </TableRow>\r\n          </TableBody>\r\n        </Table>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport './About.css'\r\n\r\nexport default function About(props){\r\n  return (\r\n    <div className=\"About\">\r\n      <Typography variant=\"h4\" className=\"h-1\">\r\n        Welcome to Mind Your Time\r\n      </Typography>\r\n      <p className=\"summary\">\r\n        Mind Your Time is a platform that aims to tackle a complex issue in a simplistic way\r\n      </p>\r\n      <p>\r\n        Do you ever have trouble realistically planning out your day and then actually executing the plan?\r\n        <br/>\r\n        Mind Your Time is here to help.\r\n      </p><p>\r\n        The idea here is simple. Plan your day and then check if you're still on schedule.\r\n        Write down when you're gonna do what and how long it's gonna take.\r\n        Then periodically check if you're making the progress you should be making.\r\n      </p><p>\r\n        Like I said, the idea is simple but if you truly follow it, I promise your productivity will skyrocket.\r\n        Starting right now.\r\n      </p><p>\r\n        It seems easy but if you've ever really tried doing it, you probably know it isn't.\r\n        There are a ton of distractions. All the time. That is why we're introducing buffer times.\r\n      </p>\r\n      <div id=\"#bufferTimes\">\r\n        <Typography variant=\"h5\" className=\"h-2\">\r\n          Buffer Times\r\n        </Typography>\r\n        <p className=\"summary\">\r\n          Buffer times are essential to making a realistic plan\r\n        </p><p>\r\n          You may have noticed that whenever you set out to do something, something else always comes up and requires your full attention.\r\n          Like your cat walking over your keyboard. Or your coffee mug spilling.\r\n          Or a billion other things that you simply cannot foresee.\r\n          By the time you come back, your entire day's plan is thrown into disarray.\r\n        </p><p>\r\n          In order to be truly productive, you need to expect the unexpected.\r\n          We take care of that for you.\r\n        </p><p>\r\n          Buffer times are the solution. They are short breaks that we automatically insert after each planned project.\r\n          Their length is proportional to the length of the previous project - about 20% of the project's length by default.\r\n          (Note that this can be changed in the settings)\r\n          These little breaks in your schedule aren't primarily meant as breaks though.\r\n          Instead, their job is to compansate for the distractions that happen while you're working on the previous project.\r\n          Ideally when you actually execute your plan, these little breaks should disappear.\r\n          However, if they don't feel free to rest for a little while - whatever works for you.\r\n        </p><p>\r\n          Of course if you feel like you need more breaks in your schedule, you can insert them in using our breaks editor.\r\n          You could also increase the buffer time percentage in the settings\r\n          but note that this comes at a price - a slight but measurable decrease in productivity.\r\n          On the other hand, if you want to aim for even higher productivity, you can decrease the percentage\r\n          but then you run the risk of your plan being too ideallistic and falling apart.\r\n        </p><p>\r\n          At the end of the day, your buffer times need to be balanced and that balance can only be accomplished by trial and error.\r\n          So feel free to experiment with the percentage if you feel it can make the app work better for you.\r\n        </p>\r\n      </div>\r\n      <div id=\"#aboutMe\">\r\n        <Typography variant=\"h5\" className=\"h-2\">\r\n          About me\r\n        </Typography>\r\n        <p>\r\n          I've experimented with a lot of different productivity/time-management systems over the years.\r\n          At the end I developed a fairly simple system - writing down what I want to do today and when exactly I wanna do it.\r\n          Sounds simple, I know, but it truly improved my productivity by a lot.\r\n          The problem was that I couldn't find an app to use for this so I just had write it down on my whiteboard.\r\n          (Yes, I actually have a whiteboard in my bedroom. Go ahead, judge me.)\r\n        </p><p>\r\n          This was pretty annoying so of course: I'm the kind of guy that needs everything on a screen so I didn't do it every day.\r\n          And so a while later, I decided to create Mind Your Time.\r\n          At first, it was just as a way off to show my skills to employers and organize my own time,\r\n          only later did I realize that it could actually be really useful to other people as well.\r\n        </p><p>\r\n          I really hope you find this app useful and that it helps you with whatever you set out to do.\r\n          If you find any problems, get an idea for a new feature you'd like to see or just want to send me anything at all, here's my contact info:\r\n        </p>\r\n        <div id=\"#contact\">\r\n          <Typography variant=\"h6\">\r\n            Contact\r\n          </Typography>\r\n          <a href=\"https://goo.gl/forms/jdesExEMegbkLPjp2\" target=\"_blank\" rel=\"noopener noreferrer\">Feedback form</a> (you can submit feedback here or via email, whichever you prefer)\r\n          <br/>\r\n          Email: <a href=\"mailto:michaelfarnik@gmail.com\">michaelfarnik@gmail.com</a>\r\n          <br/>\r\n          GitHub: <a href=\"https://github.com/michaloslav\">Michael Farník</a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\n\r\nexport default function LinkToRoot(props){\r\n  return (\r\n    <Link className=\"LinkToRoot\" to=\"/\" aria-label=\"Back\">\r\n      <ArrowBackIcon />\r\n    </Link>\r\n  )\r\n}\r\n","import React, { Component } from 'react';\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport App from \"./App\"\r\nimport Settings from \"./Settings\"\r\nimport About from \"./About\"\r\nimport LinkToRoot from './LinkToRoot'\r\nimport { HashLink } from 'react-router-hash-link';\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\nimport green from '@material-ui/core/colors/green';\r\n\r\nconst defaultSettings = {\r\n  timeFormat24H: false,\r\n  bufferTimePercentage: .2,\r\n  showResetButtonAfter: 16, // in hours\r\n  defaultColors: [\r\n    \"#4BFFD1\",\r\n    \"#39FF00\",\r\n    \"#E8A60C\",\r\n    \"#FF4848\",\r\n    \"#290CE8\",\r\n  ],\r\n  updateTimesAfterDrag: true,\r\n  updateTimesAfterEdit: true,\r\n  updateTimesAfterDelete: true,\r\n  roundTo: 5,\r\n  changeModeOnTab: false,\r\n  detectBreaksAutomatically: true\r\n}\r\n\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      main: '#039be5',\r\n    },\r\n    secondary: green\r\n  },\r\n  typography: {\r\n    useNextVariants: true\r\n  }\r\n})\r\n\r\nexport default class AppRouter extends Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      settings: {}\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    let settings\r\n\r\n    try {\r\n      settings = JSON.parse(localStorage.settings)\r\n    }\r\n    catch (e) {\r\n      settings = defaultSettings\r\n    }\r\n\r\n    this.setState({settings})\r\n  }\r\n\r\n  handleSettingsChange(settings){\r\n    this.setState({settings})\r\n    localStorage.settings = JSON.stringify(settings)\r\n  }\r\n\r\n  AppWithProps = (props) => <App settings={this.state.settings} {...props}/>\r\n  SettingsWithProps = (props) => (\r\n    <Settings\r\n      settings={this.state.settings}\r\n      defaultSettings={defaultSettings}\r\n      onSettingsChange={this.handleSettingsChange.bind(this)}\r\n      {...props}/>\r\n  )\r\n\r\n  render(){\r\n    return (\r\n      <Router>\r\n        <MuiThemeProvider theme={theme}>\r\n          <div style={{position: \"relative\", minWidth: \"calc(660px - 2rem)\"}}>\r\n            <Switch>\r\n              <Route path=\"/\" exact />\r\n              <Route component={LinkToRoot} />\r\n            </Switch>\r\n            <Switch>\r\n              <Route path=\"/settings/\" render={this.SettingsWithProps}/>\r\n              <Route path=\"/about/\" component={About}/>\r\n              <Route path=\"/robots.txt\" target=\"_self\" />\r\n              <Route render={this.AppWithProps}/>\r\n            </Switch>\r\n            <footer>\r\n              Created by <a href=\"https://github.com/michaloslav\">Michael Farník</a>\r\n              <span> | </span>\r\n              <a href=\"https://goo.gl/forms/jdesExEMegbkLPjp2\" target=\"_blank\" rel=\"noopener noreferrer\">Feedback</a>\r\n              <span> | </span>\r\n              <HashLink to=\"/about#contact\">Contact</HashLink>\r\n              <div>\r\n                Icon made by <a href=\"https://www.flaticon.com/authors/kiranshastry\" title=\"Kiranshastry\" target=\"_blank\" rel=\"noopener noreferrer\">Kiranshastry</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\" target=\"_blank\" rel=\"noopener noreferrer\">www.flaticon.com</a> is licensed by <a href=\"http://creativecommons.org/licenses/by/3.0/\" title=\"Creative Commons BY 3.0\" target=\"_blank\" rel=\"noopener noreferrer\">CC 3.0 BY</a>\r\n              </div>\r\n            </footer>\r\n          </div>\r\n        </MuiThemeProvider>\r\n      </Router>\r\n    )\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Router from './Router';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Router />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}