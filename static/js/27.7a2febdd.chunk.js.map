{"version":3,"sources":["TimeSetterDesktop.js"],"names":["isValidNumberInput","val","minSize","maxSize","isNaN","TimeSetter","handleKeyPress","e","key","_this","props","onEnterPress","id","target","value","maxHValue","this","settings","timeFormat24H","onChange","action","m","incrementation","roundTo","TimeCalc","add","toTimeObject","subtractToMinutes","isBiggerThan","h","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","className","showError","style","display","_material_ui_core_Input__WEBPACK_IMPORTED_MODULE_6___default","handleInputChange","bind","pm","firstInputId","placeholder","aria-label","autoComplete","error","hError","onKeyPress","onKeyDown","handleKeyDown","mError","_material_ui_core_Select__WEBPACK_IMPORTED_MODULE_7___default","_material_ui_core_MenuItem__WEBPACK_IMPORTED_MODULE_8___default","Component"],"mappings":"oQAOA,SAASA,EAAmBC,EAAKC,EAASC,GACxC,MACU,KAARF,IACGG,MAAMH,IACPA,GAAOC,GAAWD,GAAOE,MAOVE,6MAgCnBC,eAAiB,SAAAC,GACF,UAAVA,EAAEC,KAAmBC,EAAKC,MAAMC,cAAcF,EAAKC,MAAMC,iGAhC5CC,EAAIL,GAEpB,IAAIN,EACsBA,EAAV,kBAANM,EAAsBA,EAGpB,OAAPK,EAAsC,OAAnBL,EAAEM,OAAOC,MACpBP,EAAEM,OAAOC,MAItB,IAAIC,EAAYC,KAAKN,MAAMO,SAASC,cAAgB,GAAK,GAC9C,MAAPN,IAAeZ,EAAmBC,EAAK,EAAGc,IACjC,MAAPH,IAAeZ,EAAmBC,EAAK,EAAG,MAK7Ce,KAAKN,MAAMO,SAASC,eAAwB,MAAPN,IACnCX,GAAO,IACRA,GAAO,GACPe,KAAKN,MAAMS,SAAS,MAAM,IAEvBH,KAAKN,MAAMS,SAAS,MAAM,IAKjCH,KAAKN,MAAMS,SAASP,EAAIX,0CAOZW,EAAIL,GAEhB,IAAIa,EAKJ,GAJa,YAAVb,EAAEC,MAAmBY,EAAS,MACpB,cAAVb,EAAEC,MAAqBY,EAAS,QAG/BA,EAAJ,CAGA,IAAInB,EAAMe,KAAKN,MAAMI,MACjBb,IAAOG,MAAMH,EAAIoB,KAAIpB,EAAM,GAG/B,IAAIqB,EAAwB,MAAPV,EAAaI,KAAKN,MAAMO,SAASM,QAAU,GAC5CtB,EAAN,OAAXmB,EAAuBI,IAASC,IAAIxB,EAAKqB,GACjCE,IAASE,aAAaF,IAASG,kBAAkB1B,EAAKqB,IAAiB,GAG/EE,IAASI,aAAa,EAAG3B,GAAK,KAAQA,EAAMuB,IAASC,IAAIxB,EAAK,OAEjEe,KAAKN,MAAMS,SAAS,SAAUlB,qCAI9B,IAAI4B,EAAIb,KAAKN,MAAMI,MAAMe,EACzBA,EAAU,IAANA,EAAU,GAAKA,EACnB,IAAIR,EAAIL,KAAKN,MAAMI,MAAMO,EAGzB,OAFAA,EAAU,IAANA,EAAU,IAAMA,EAAIA,EAGtBS,EAAAC,EAAAC,cAAA,OAAKC,UAAW,qBAAuBjB,KAAKN,MAAMwB,UAAY,mBAAqB,IAAKC,MAAO,CAACC,QAAS,WACvGN,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CACEZ,SAAUH,KAAKsB,kBAAkBC,KAAKvB,KAAM,KAC5CF,MAAQE,KAAKN,MAAMO,SAASC,eAAiBF,KAAKN,MAAMI,MAAM0B,GAAMX,EAAI,GAAKA,EAC7EjB,GAAII,KAAKN,MAAM+B,aACfC,YAAY,QACZC,aAAW,QACXC,aAAa,MACbC,MAAO7B,KAAKN,MAAMoC,OAClBC,WAAY/B,KAAKV,eACjB0C,UAAWhC,KAAKiC,cAAcV,KAAKvB,KAAM,OAV7C,IAaEc,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CACEZ,SAAUH,KAAKsB,kBAAkBC,KAAKvB,KAAM,KAC5CF,MAAOO,EACPqB,YAAY,UACZC,aAAW,UACXC,aAAa,MACbC,MAAO7B,KAAKN,MAAMwC,OAClBH,WAAY/B,KAAKV,eACjB0C,UAAWhC,KAAKiC,cAAcV,KAAKvB,KAAM,QAEzCA,KAAKN,MAAMO,SAASC,eACpBY,EAAAC,EAAAC,cAACmB,EAAApB,EAAD,CACEZ,SAAUH,KAAKsB,kBAAkBC,KAAKvB,KAAM,MAC5CF,MAAOE,KAAKN,MAAMI,MAAM0B,GAAK,KAAO,MACpCV,EAAAC,EAAAC,cAACoB,EAAArB,EAAD,CAAUjB,MAAM,MAAhB,MACAgB,EAAAC,EAAAC,cAACoB,EAAArB,EAAD,CAAUjB,MAAM,MAAhB,eA/F4BuC","file":"static/js/27.7a2febdd.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Input from '@material-ui/core/Input';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport TimeCalc from './util/TimeCalc'\r\n\r\n// simple validation\r\nfunction isValidNumberInput(val, minSize, maxSize){\r\n  if(\r\n    val === \"\" || (\r\n      !isNaN(val) && // if it's a number or an emty string and...\r\n      val >= minSize && val <= maxSize // the correct size\r\n    )\r\n  ) return true\r\n  else return false\r\n}\r\n\r\n\r\nexport default class TimeSetter extends Component {\r\n  handleInputChange(id, e){\r\n    // get the input value\r\n    let val\r\n    if(typeof e === \"number\") val = e // needs to accept the input from handleKeyDown\r\n    else{\r\n      // get the value depending on the id\r\n      if(id === \"pm\") val = e.target.value === \"PM\"\r\n      else val = e.target.value\r\n    }\r\n\r\n    // validate the input\r\n    let maxHValue = this.props.settings.timeFormat24H ? 24 : 12\r\n    if((id === \"h\" && !isValidNumberInput(val, 1, maxHValue))\r\n      || (id === \"m\" && !isValidNumberInput(val, 0, 59))\r\n    ) return\r\n\r\n\r\n    // if we're using the 24-hour time format for the UI, convert it back over to the normal format\r\n    if(this.props.settings.timeFormat24H && id === \"h\"){\r\n      if(val >= 12){\r\n        val -= 12\r\n        this.props.onChange(\"pm\", true)\r\n      }\r\n      else this.props.onChange(\"pm\", false)\r\n    }\r\n\r\n\r\n    // emit the change up the chain\r\n    this.props.onChange(id, val)\r\n  }\r\n\r\n  handleKeyPress = e => {\r\n    if(e.key === \"Enter\" && this.props.onEnterPress) this.props.onEnterPress()\r\n  }\r\n\r\n  handleKeyDown(id, e){\r\n    // determine what is to be done\r\n    let action\r\n    if(e.key === \"ArrowUp\") action = \"up\"\r\n    if(e.key === \"ArrowDown\") action = \"down\"\r\n\r\n    // if nothing is supposed to be done, stop the execution\r\n    if(!action) return\r\n\r\n    // get the value, handle empty input\r\n    let val = this.props.value\r\n    if(!val || isNaN(val.m)) val = 0\r\n\r\n    // edit the val\r\n    let incrementation = id === \"m\" ? this.props.settings.roundTo : 60\r\n    if(action === \"up\") val = TimeCalc.add(val, incrementation)\r\n    else val = TimeCalc.toTimeObject(TimeCalc.subtractToMinutes(val, incrementation), true)\r\n\r\n    // handle negative values\r\n    if(TimeCalc.isBiggerThan(0, val, false)) val = TimeCalc.add(val, 24*60)\r\n\r\n    this.props.onChange(\"object\", val)\r\n  }\r\n\r\n  render(){\r\n    let h = this.props.value.h\r\n    h = h === 0 ? 12 : h\r\n    let m = this.props.value.m\r\n    m = m === 0 ? \"0\" + m : m // turns 0 into \"00\"\r\n\r\n    return (\r\n      <div className={\"TimeSetterDesktop\" + (this.props.showError ? \" timeSetterError\" : \"\")} style={{display: \"inline\"}}>\r\n        <Input\r\n          onChange={this.handleInputChange.bind(this, \"h\")}\r\n          value={(this.props.settings.timeFormat24H && this.props.value.pm) ? h + 12 : h}\r\n          id={this.props.firstInputId}\r\n          placeholder=\"Hours\"\r\n          aria-label=\"Hours\"\r\n          autoComplete=\"off\"\r\n          error={this.props.hError}\r\n          onKeyPress={this.handleKeyPress}\r\n          onKeyDown={this.handleKeyDown.bind(this, \"h\")}\r\n        />\r\n        :\r\n        <Input\r\n          onChange={this.handleInputChange.bind(this, \"m\")}\r\n          value={m}\r\n          placeholder=\"Minutes\"\r\n          aria-label=\"Minutes\"\r\n          autoComplete=\"off\"\r\n          error={this.props.mError}\r\n          onKeyPress={this.handleKeyPress}\r\n          onKeyDown={this.handleKeyDown.bind(this, \"m\")}\r\n        />\r\n        {!this.props.settings.timeFormat24H && (\r\n          <Select\r\n            onChange={this.handleInputChange.bind(this, \"pm\")}\r\n            value={this.props.value.pm ? \"PM\" : \"AM\"}>\r\n            <MenuItem value=\"AM\">AM</MenuItem>\r\n            <MenuItem value=\"PM\">PM</MenuItem>\r\n          </Select>\r\n        )}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n"],"sourceRoot":""}