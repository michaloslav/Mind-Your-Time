{"version":3,"sources":["../node_modules/@material-ui/icons/Help.js","TimeStatsModal.js","TimeStats.js"],"names":["_interopRequireDefault","__webpack_require__","Object","defineProperty","exports","value","default","_react","_default","createElement","Fragment","fill","d","addProjectToDoughnutData","doughnutData","project","progress","datasets","backgroundColor","push","color","data","labels","name","estimatedDuration","TimeStatsModal","props","plannedMinusPredictedEndTime","_props$settings","settings","timeFormat24H","roundTo","bufferTimePercentage","predictedEndTime","TimeCalc","round","add","currentTime","stats","timeNeeded","plannedMinusPredictedEndTimePositive","isBiggerThan","endTime","subtract","realEndTime","totalDoneTimeSoFar","totalTimeToBeDone","predictedUnproductiveTime","label","projects","forEach","duration","parseInt","state","startedWorkingOnIt","subtractToMinutes","objectSpread","s","Date","getSeconds","Math","breaks","breakInfo","breakDuration","startTime","durationSoFar","date","h","getHours","m","getMinutes","pm","totalTimePassed","timeUntilPredictedEndTime","productivityPercentageSoFar","predictedProductivityPercentage","unproductiveTime","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","el","err","return","textColor","darkTheme","react_default","a","className","style","Typography_default","variant","makeFullLengthDurationString","makeString","totalProjectTime","totalBufferTime","totalBreakTime","isNaN","Tooltip_default","disableFocusListener","disableTouchListener","title","concat","Help_default","es","width","height","length","options","maintainAspectRatio","legend","position","fontColor","TimeStats","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","updateCurrentTime","currentTimeAvailable","setState","onCurrentTimeChange","openModal","modalOpen","currentTimeUpdateInterval","setInterval","clearInterval","timeRemaining","timeNeededWarning","timeRemainingNegative","timeRemainingWarning","_this2","i","durationLeft","toMinutesSinceMidnight","toTimeObject","addToMinutes","Grid_default","item","onClick","shortLabels","Dialog_default","open","onClose","aria-label","src_TimeStatsModal","assign","Component"],"mappings":"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","file":"static/js/20.21ee9f97.chunk.js","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(_react.default.Fragment, null, _react.default.createElement(\"path\", {\n  fill: \"none\",\n  d: \"M0 0h24v24H0z\"\n}), _react.default.createElement(\"path\", {\n  d: \"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 17h-2v-2h2v2zm2.07-7.75l-.9.92C13.45 12.9 13 13.5 13 15h-2v-.5c0-1.1.45-2.1 1.17-2.83l1.24-1.26c.37-.36.59-.86.59-1.41 0-1.1-.9-2-2-2s-2 .9-2 2H8c0-2.21 1.79-4 4-4s4 1.79 4 4c0 .88-.36 1.68-.93 2.25z\"\n})), 'Help');\n\nexports.default = _default;","import React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport HelpIcon from '@material-ui/icons/Help';\r\nimport { Doughnut } from 'react-chartjs-2';\r\nimport TimeCalc from './util/TimeCalc'\r\nimport './css/TimeStatsModal.css'\r\n\r\n// a util function used to cnvert the data and push it into the data that will be used to show a doughnut chart\r\nfunction addProjectToDoughnutData(doughnutData, project, progress){\r\n  doughnutData.datasets[0].backgroundColor.push(project.color)\r\n  doughnutData.datasets[0].data.push(progress)\r\n  doughnutData.labels.push(project.name)\r\n\r\n  if(project.estimatedDuration){\r\n    doughnutData.datasets[1].backgroundColor.push(project.color)\r\n    doughnutData.datasets[1].data.push(project.estimatedDuration)\r\n  }\r\n}\r\n\r\nconst TimeStatsModal = props => {\r\n  let { timeFormat24H, roundTo, bufferTimePercentage } = props.settings\r\n\r\n  // calculate some basic stats\r\n  let predictedEndTime = TimeCalc.round(TimeCalc.add(props.currentTime, props.stats.timeNeeded), roundTo)\r\n  let plannedMinusPredictedEndTimePositive = TimeCalc.isBiggerThan(props.endTime, predictedEndTime, false, true)\r\n  // make sure the input to makeString is positive\r\n  let plannedMinusPredictedEndTime\r\n  if(plannedMinusPredictedEndTimePositive){\r\n    plannedMinusPredictedEndTime = TimeCalc.round(TimeCalc.subtract(props.endTime, predictedEndTime, true), roundTo)\r\n  }\r\n  else{\r\n    plannedMinusPredictedEndTime = TimeCalc.round(TimeCalc.subtract(predictedEndTime, props.endTime, true), roundTo)\r\n  }\r\n\r\n  let totalDoneTimeSoFar = 0, totalTimeToBeDone = 0, predictedUnproductiveTime = 0\r\n  let doughnutData = {\r\n    datasets: [\r\n      {\r\n        label: \"Actual\",\r\n        backgroundColor: [],\r\n        data: []\r\n      },\r\n      {\r\n        label: \"Planned\",\r\n        backgroundColor: [],\r\n        data: []\r\n      }\r\n    ],\r\n    labels: []\r\n  }\r\n\r\n  // add each project to doughnutData\r\n  props.projects.forEach(project => {\r\n    // calculate its duration, determine what should be added to doughnutData\r\n    // (if the project is finished, add the whole thing to both charts, else calculate progress)\r\n    let duration = parseInt(project.estimatedDuration)\r\n    if(project.state === \"done\"){\r\n      totalDoneTimeSoFar += duration\r\n      addProjectToDoughnutData(doughnutData, project, duration)\r\n    }\r\n    else{\r\n      let progress = 0\r\n      if(project.progress) progress += parseInt(project.progress)\r\n      if(project.state === \"workingOnIt\" && project.startedWorkingOnIt){\r\n        progress += TimeCalc.subtractToMinutes(\r\n          {...props.currentTime, s: new Date().getSeconds()},\r\n          project.startedWorkingOnIt,\r\n          true\r\n        )\r\n      }\r\n\r\n      if(progress > duration) progress = duration\r\n\r\n      totalDoneTimeSoFar += progress\r\n      totalTimeToBeDone += (duration - progress)\r\n      addProjectToDoughnutData(doughnutData, project, progress)\r\n    }\r\n\r\n    predictedUnproductiveTime += Math.round(duration * bufferTimePercentage)\r\n  })\r\n\r\n  // add breaks to doughnutData\r\n  props.breaks.forEach(breakInfo => {\r\n    let breakDuration = TimeCalc.subtractToMinutes(breakInfo.endTime, breakInfo.startTime, true)\r\n    let color = \"#bbb\" // the color used for all breaks universally\r\n\r\n    // add the break to the \"planned\" chart\r\n    doughnutData.labels.push(breakInfo.name)\r\n    doughnutData.datasets[1].backgroundColor.push(color)\r\n    doughnutData.datasets[1].data.push(breakDuration)\r\n\r\n    // add the break to the \"your day so far\" chart\r\n    let durationSoFar = 0\r\n    // determine durationSoFar\r\n    if(TimeCalc.isBiggerThan(props.currentTime, breakInfo.startTime, false, true)){\r\n\r\n      // determine what part of the break to add\r\n      if(TimeCalc.isBiggerThan(props.currentTime, breakInfo.endTime, true, true)){\r\n        // add the whole break\r\n        durationSoFar = breakDuration\r\n      }\r\n      else{\r\n        // only add the part that has taken place already\r\n        durationSoFar = TimeCalc.subtractToMinutes(props.currentTime, breakInfo.startTime, true)\r\n      }\r\n    }\r\n    doughnutData.datasets[0].backgroundColor.push(color)\r\n    doughnutData.datasets[0].data.push(durationSoFar)\r\n  })\r\n\r\n  // if realEndTime is available, convert and use it, else use currentTime\r\n  let realEndTime\r\n  if(props.realEndTime){\r\n    let date = new Date(props.realEndTime)\r\n    let h = date.getHours()\r\n    let m = date.getMinutes()\r\n    if(date.getSeconds() >= 30) m++ // handle seconds\r\n    let pm = false\r\n    if(h > 12){\r\n      h -= 12\r\n      pm = true\r\n    }\r\n    realEndTime = {h, m, pm}\r\n  }\r\n\r\n  // calculate some more stats\r\n  let totalTimePassed = TimeCalc.subtractToMinutes(realEndTime || props.currentTime, props.startTime, true)\r\n  let timeUntilPredictedEndTime = TimeCalc.subtractToMinutes(predictedEndTime, props.currentTime, true)\r\n  let productivityPercentageSoFar = Math.round(100 * totalDoneTimeSoFar / totalTimePassed)\r\n  let predictedProductivityPercentage = Math.round(100 * (totalDoneTimeSoFar + totalTimeToBeDone) / (totalTimePassed + timeUntilPredictedEndTime))\r\n\r\n  // push the unproductive time so far to the doughnutData\r\n  let unproductiveTime = totalTimePassed - totalDoneTimeSoFar\r\n  unproductiveTime = Math.round(unproductiveTime / roundTo) * roundTo\r\n  addProjectToDoughnutData(doughnutData, {name: \"Unproductive time\", color: \"#aaa\"}, unproductiveTime)\r\n\r\n  // finish calculating the predictedUnproductiveTime\r\n  for(let el of props.breaks){\r\n    predictedUnproductiveTime += TimeCalc.subtractToMinutes(el.endTime, el.startTime, true)\r\n  }\r\n  predictedUnproductiveTime = Math.round(predictedUnproductiveTime / roundTo) * roundTo\r\n\r\n  // push predictedUnproductiveTime to the doughnutData\r\n  doughnutData.datasets[1].backgroundColor.push(\"#aaa\")\r\n  doughnutData.datasets[1].data.push(predictedUnproductiveTime)\r\n\r\n  var textColor = props.settings.darkTheme ? \"white\" : \"black\"\r\n\r\n\r\n  //console.warn(\"Conditional debugger\")\r\n  //if(isNaN(productivityPercentageSoFar) || isNaN(predictedProductivityPercentage)) debugger\r\n\r\n  return (\r\n    <div className=\"TimeStatsModal\" style={{color: textColor}}>\r\n      <Typography variant=\"h6\">\r\n        You need {TimeCalc.makeFullLengthDurationString(props.stats.timeNeeded)}\r\n      </Typography>\r\n      <b>{TimeCalc.makeString(props.stats.totalProjectTime, false, false, timeFormat24H)}</b> for projects\r\n      <br/>\r\n      {TimeCalc.makeString(props.stats.totalBufferTime, false, false, timeFormat24H)} for buffers\r\n      <br/>\r\n      {TimeCalc.makeString(props.stats.totalBreakTime, false, false, timeFormat24H)} for breaks\r\n      <div className=\"section\">\r\n        At the current pace, you'll be done at <b>{TimeCalc.makeString(predictedEndTime, true, false, timeFormat24H)}</b>\r\n        <br/>\r\n        That's\r\n        <b>\r\n          <span> </span>\r\n          {TimeCalc.makeFullLengthDurationString(plannedMinusPredictedEndTime)}\r\n          <span> </span>\r\n          {plannedMinusPredictedEndTimePositive ? \"earlier\" : \"later\"}\r\n        </b>\r\n        <span> </span>\r\n        than what you planned\r\n      </div>\r\n      {!isNaN(productivityPercentageSoFar) && productivityPercentageSoFar >= 0 && productivityPercentageSoFar <= 100 && (\r\n        <div className=\"section\">\r\n          You've been productive <b>{productivityPercentageSoFar}%</b> of the time so far\r\n          <br/>\r\n          Assuming you're done at {TimeCalc.makeString(predictedEndTime, true, false, timeFormat24H)},\r\n          <br/>\r\n          your productivity percentage will be\r\n          <span> </span>\r\n          {predictedProductivityPercentage < productivityPercentageSoFar ? (\r\n            <Tooltip disableFocusListener disableTouchListener\r\n              title={\r\n                `Your predicted productivity percentage is lower then your current one because of buffer times.\r\n                You can learn more about buffer times in the about section.`\r\n              }\r\n            >\r\n              <b>\r\n                {predictedProductivityPercentage}%\r\n              </b>\r\n            </Tooltip>\r\n          ) : (\r\n            <b>\r\n              {predictedProductivityPercentage}%\r\n            </b>\r\n          )}\r\n        </div>\r\n      )}\r\n      <div className=\"section\">\r\n        <Typography variant=\"h6\">\r\n          Your day so far:\r\n          <Tooltip disableFocusListener disableTouchListener\r\n            title={\r\n              `The inner circle represents your day as you planned it,\r\n              the outer one represents your day so far\r\n              (starting at ${TimeCalc.makeString(props.startTime, true, false, timeFormat24H)})`\r\n            }\r\n          >\r\n            <HelpIcon className=\"helperIcon\" />\r\n          </Tooltip>\r\n        </Typography>\r\n        <div>\r\n          <Doughnut\r\n            data={doughnutData}\r\n            width={250}\r\n            height={200 + doughnutData.datasets[0].data.length * 4}\r\n            options={{maintainAspectRatio: false, legend: {position: \"bottom\", labels: {fontColor: textColor}}}}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TimeStatsModal\r\n","import React, { Component } from 'react';\r\nimport TimeStatsModal from './TimeStatsModal'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Tooltip from '@material-ui/core/Tooltip'\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport TimeCalc from './util/TimeCalc'\r\nimport './css/TimeStats.css'\r\n\r\nexport default class TimeStats extends Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      currentTimeAvailable: false, // stores whether the currentTime has been set (to prevent unnecessary and useless calculation on load)\r\n      modalOpen: false\r\n    }\r\n\r\n    this.currentTimeUpdateInterval = setInterval(this.updateCurrentTime, 1000)\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.updateCurrentTime()\r\n  }\r\n\r\n  componentWillUnmount(){\r\n    clearInterval(this.currentTimeUpdateInterval)\r\n  }\r\n\r\n  // runs every second, checks if the time hasn't changed since the last time it ran (ignoring seconds, ms, etc. of course)\r\n  updateCurrentTime = () => {\r\n    let currentTime = new Date()\r\n    let m = currentTime.getMinutes()\r\n\r\n    if(!this.state.currentTimeAvailable) this.setState({currentTimeAvailable: true})\r\n\r\n    // if it's still the same minute, there's no need to update the clock\r\n    // (and if this isn't the initial time setting)\r\n    if(m === this.props.currentTime.m && this.props.currentTime.h !== 0) return\r\n\r\n    // format the time\r\n    let h = currentTime.getHours()\r\n    let pm = h >= 12\r\n    h = h % 12\r\n    h = h === 0 ? 12 : h\r\n\r\n    // update the state\r\n    this.props.onCurrentTimeChange({h, m, pm})\r\n  }\r\n\r\n  openModal = () => {\r\n    this.setState({modalOpen: true})\r\n  }\r\n\r\n  render(){\r\n    // calculate the stats\r\n    // (if currentTime and settings are available)\r\n    let totalProjectTime, totalBufferTime, totalBreakTime, timeNeeded,\r\n      timeRemaining, timeNeededWarning, timeRemainingNegative, timeRemainingWarning\r\n\r\n    if(this.state.currentTimeAvailable && this.props.settings.bufferTimePercentage){\r\n      totalProjectTime = totalBufferTime = 0\r\n      this.props.projects.forEach((project, i) => {\r\n        if(project.state !== \"done\"){\r\n          // determine how much time there is left and how much progress there has been\r\n          let durationLeft = parseInt(project.estimatedDuration)\r\n\r\n          let progress = parseInt(project.progress)\r\n          if(project.state === \"workingOnIt\" && project.startedWorkingOnIt){\r\n            progress += TimeCalc.subtractToMinutes(\r\n              {...this.props.currentTime, s: new Date().getSeconds()},\r\n              project.startedWorkingOnIt,\r\n              true\r\n            )\r\n          }\r\n\r\n          if(progress){\r\n            if(progress > durationLeft) durationLeft = 0\r\n            else durationLeft -= progress\r\n          }\r\n\r\n          totalProjectTime += durationLeft\r\n\r\n          // if this isn't the last project, add a buffer time to the sum\r\n          if(i !== this.props.projects.length - 1){\r\n            totalBufferTime += Math.round(durationLeft * this.props.settings.bufferTimePercentage)\r\n          }\r\n        }\r\n      })\r\n      // round according to settings\r\n      totalProjectTime = Math.round(totalProjectTime / this.props.settings.roundTo) * this.props.settings.roundTo\r\n      totalBufferTime = Math.round(totalBufferTime / this.props.settings.roundTo) * this.props.settings.roundTo\r\n\r\n      // calculate similar stats for breaks\r\n      totalBreakTime = 0\r\n      for(let el of this.props.breaks){\r\n        let endTime = TimeCalc.toMinutesSinceMidnight(el.endTime, true)\r\n        let currentTime = TimeCalc.toMinutesSinceMidnight(this.props.currentTime, true)\r\n\r\n        // if the break has already passed, don't count it in\r\n        if(TimeCalc.isBiggerThan(currentTime, endTime, false)) continue\r\n\r\n        let startTime = TimeCalc.toMinutesSinceMidnight(el.startTime, true)\r\n\r\n        // if the break hasn't started yet, count in its entire length\r\n        if(TimeCalc.isBiggerThan(startTime, currentTime, true)){\r\n          totalBreakTime += TimeCalc.subtractToMinutes(endTime, startTime, true)\r\n        }\r\n        // if the break has started and is currently going on, only add the portion of it that hasn't happened yet\r\n        else totalBreakTime += TimeCalc.subtractToMinutes(endTime, currentTime, true)\r\n      }\r\n      // round totalBreakTime according to settings\r\n      totalBreakTime = Math.round(totalBreakTime / this.props.settings.roundTo) * this.props.settings.roundTo\r\n\r\n      // finally, calculate the 2 numbers to be shown at the top of the screen\r\n      timeNeeded = TimeCalc.toTimeObject(TimeCalc.addToMinutes(totalProjectTime, totalBufferTime, totalBreakTime), false)\r\n      timeRemaining = TimeCalc.subtract(this.props.endTime, this.props.currentTime, true)\r\n\r\n      // figure out which warnings to show\r\n      timeNeededWarning = TimeCalc.isBiggerThan(timeNeeded, timeRemaining, false, false)\r\n      timeRemainingNegative = !TimeCalc.isBiggerThan(timeRemaining, 0)\r\n      timeRemainingWarning = timeRemainingNegative && this.props.endTime.h !== \"\" && this.props.endTime.m !== \"\"\r\n    }\r\n    else{\r\n      // used if the currentTime or settings aren't available yet -> faster load time\r\n      totalProjectTime = totalBufferTime = totalBreakTime = 0\r\n      timeNeeded = timeRemaining = {h: 0, m: 0, pm: false}\r\n      timeNeededWarning = timeRemainingNegative = timeRemainingWarning = false\r\n    }\r\n\r\n\r\n    //console.warn(\"Conditional debugger\");\r\n    //if(this.props.projects.length.length && !Number(timeNeeded.m) && !Number(timeNeeded.h)) debugger\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <Grid item className={\"timeStatsSideGridItem\" + (timeNeededWarning ? \" timeStatsWarning\" : \"\")}>\r\n          <Tooltip title={\r\n            \"Projects: \" + TimeCalc.makeString(totalProjectTime, false) +\r\n            \",\\nBuffers: \" + TimeCalc.makeString(totalBufferTime, false) +\r\n            \",\\nBreaks: \" + TimeCalc.makeString(totalBreakTime, false) + \" (click for more)\"\r\n          }>\r\n            <div onClick={this.openModal}>\r\n              <div className=\"timeStatsLabelDiv\">\r\n                <label>\r\n                  {this.props.shortLabels ? \"N\" : \"Time n\"}eeded:\r\n                </label>\r\n              </div>\r\n              {TimeCalc.makeString(timeNeeded, false)}\r\n            </div>\r\n          </Tooltip>\r\n        </Grid>\r\n        <Grid item>\r\n          <h4>\r\n            {TimeCalc.makeString(this.props.currentTime, true, false, this.props.settings.timeFormat24H)}\r\n          </h4>\r\n        </Grid>\r\n        <Grid item className={\"timeStatsSideGridItem\" + (timeRemainingWarning ? \" timeStatsWarning\" : \"\")}>\r\n          <div onClick={this.openModal}>\r\n            <div className=\"timeStatsLabelDiv\">\r\n              <label>\r\n                {this.props.shortLabels ? \"R\" : \"Time r\"}emaining:\r\n              </label>\r\n            </div>\r\n            {timeRemainingNegative ? \"0:00\" : TimeCalc.makeString(timeRemaining, false)}\r\n          </div>\r\n        </Grid>\r\n        <Dialog\r\n          open={this.state.modalOpen}\r\n          onClose={() => {this.setState({modalOpen: false})}}\r\n          aria-label=\"Time Stats Modal\"\r\n        >\r\n          <TimeStatsModal\r\n            stats={{timeNeeded, totalProjectTime, totalBufferTime, totalBreakTime}}\r\n            {...this.props}\r\n          />\r\n        </Dialog>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n"],"sourceRoot":""}